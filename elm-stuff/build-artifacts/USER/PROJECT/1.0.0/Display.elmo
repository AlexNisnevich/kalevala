Elm.Display = Elm.Display || {};
Elm.Display.make = function (_elm) {
   "use strict";
   _elm.Display = _elm.Display || {};
   if (_elm.Display.values)
   return _elm.Display.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Display",
   $Basics = Elm.Basics.make(_elm),
   $Board = Elm.Board.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Game = Elm.Game.make(_elm),
   $GameTypes = Elm.GameTypes.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Graphics$Input = Elm.Graphics.Input.make(_elm),
   $Graphics$Input$Field = Elm.Graphics.Input.Field.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Piece = Elm.Piece.make(_elm),
   $Player = Elm.Player.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $State = Elm.State.make(_elm),
   $String = Elm.String.make(_elm),
   $Text = Elm.Text.make(_elm);
   var playerScoreText = F2(function (player,
   state) {
      return function () {
         var p = $Player.toString(player);
         return $Text.height(40)($Text.color($Player.toColor(player))($Text.fromString($Basics.toString($Maybe.withDefault(0)(A2($Dict.get,
         p,
         state.score))))));
      }();
   });
   var playerHandText = F2(function (player,
   state) {
      return function () {
         var p = $Player.toString(player);
         var playerType = A2($Maybe.withDefault,
         $GameTypes.Human,
         A2($Dict.get,p,state.players));
         return $Text.height(20)($Text.color($Player.toColor(player))((_U.eq(state.turn,
         player) && $State.isOngoing(state) ? $Text.bold : $Basics.identity)($Text.fromString($String.toUpper(function (t) {
            return _U.eq(t,
            "Human") ? "Player" : t;
         }($Basics.toString(playerType)))))));
      }();
   });
   var withBorder = F3(function (_v0,
   color,
   elt) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return A2($Graphics$Element.flow,
              $Graphics$Element.down,
              _L.fromArray([$Graphics$Element.color(color)(A2($Graphics$Element.spacer,
                           $Graphics$Element.widthOf(elt) + _v0._0 * 2,
                           _v0._1))
                           ,A2($Graphics$Element.flow,
                           $Graphics$Element.right,
                           _L.fromArray([$Graphics$Element.color(color)(A2($Graphics$Element.spacer,
                                        _v0._0,
                                        $Graphics$Element.heightOf(elt)))
                                        ,elt
                                        ,$Graphics$Element.color(color)(A2($Graphics$Element.spacer,
                                        _v0._0,
                                        $Graphics$Element.heightOf(elt)))]))
                           ,$Graphics$Element.color(color)(A2($Graphics$Element.spacer,
                           $Graphics$Element.widthOf(elt) + _v0._0 * 2,
                           _v0._1))]));}
         _U.badCase($moduleName,
         "between lines 254 and 260");
      }();
   });
   var renderPieceDescription = function (state) {
      return A2($Graphics$Element.spacer,
      1,
      1);
   };
   var renderDeck = function (state) {
      return function () {
         var deckSize = $State.isNotStarted(state) ? $List.length($Game.deckContents) : $State.isOngoing(state) ? $List.length(state.deck) : 0;
         var deckSizeStr = A2($Basics._op["++"],
         "Deck: ",
         $Basics.toString(deckSize));
         return A2($Graphics$Element.flow,
         $Graphics$Element.down,
         _L.fromArray([A3($Graphics$Element.image,
                      85,
                      85,
                      "images/100/deck.png")
                      ,A3($Graphics$Element.container,
                      85,
                      20,
                      $Graphics$Element.midBottom)($Graphics$Element.centered($Text.height(14)($Text.fromString(deckSizeStr))))]));
      }();
   };
   var drawLastPlacedOutline = F2(function (state,
   tileSize) {
      return function () {
         var _v4 = state.lastPlaced;
         switch (_v4.ctor)
         {case "Just":
            switch (_v4._0.ctor)
              {case "_Tuple2":
                 return function () {
                      var lastPlacedColor = $Player.toColor($Player.next(state.turn));
                      var thick = function (c) {
                         return _U.replace([["color"
                                            ,c]
                                           ,["width",4]],
                         $Graphics$Collage.defaultLine);
                      };
                      var lastPlacedOutline = A2($Graphics$Collage.move,
                      {ctor: "_Tuple2"
                      ,_0: tileSize * $Basics.toFloat(_v4._0._0)
                      ,_1: tileSize * $Basics.toFloat(_v4._0._1)},
                      A2($Graphics$Collage.outlined,
                      thick(lastPlacedColor),
                      $Graphics$Collage.square(tileSize + 4)));
                      return _L.fromArray([lastPlacedOutline]);
                   }();}
              break;
            case "Nothing":
            return _L.fromArray([]);}
         _U.badCase($moduleName,
         "between lines 118 and 124");
      }();
   });
   var pieceToImage = F3(function (piece,
   value,
   tileSize) {
      return function () {
         var imgSize = _U.cmp(tileSize,
         75) > 0 ? 100 : 50;
         var imgPath = A2($Basics._op["++"],
         "images/",
         A2($Basics._op["++"],
         $Basics.toString(imgSize),
         A2($Basics._op["++"],
         "/",
         A2($Basics._op["++"],
         $Piece.toString(piece),
         A2($Basics._op["++"],
         "-",
         A2($Basics._op["++"],
         value,
         ".png"))))));
         return A3($Graphics$Element.image,
         $Basics.round(tileSize),
         $Basics.round(tileSize),
         imgPath);
      }();
   });
   var drawPiece = F3(function (_v8,
   board,
   tileSize) {
      return function () {
         switch (_v8.ctor)
         {case "_Tuple2":
            switch (_v8._0.ctor)
              {case "_Tuple2":
                 return function () {
                      var value = A2($Board.getDisplayedTileValue,
                      {ctor: "_Tuple2"
                      ,_0: _v8._0._0
                      ,_1: _v8._0._1},
                      board);
                      var y = $Basics.toFloat(_v8._0._1) * tileSize;
                      var x = $Basics.toFloat(_v8._0._0) * tileSize;
                      return A2($Graphics$Collage.move,
                      {ctor: "_Tuple2",_0: x,_1: y},
                      $Graphics$Collage.toForm(A3(pieceToImage,
                      _v8._1,
                      value,
                      tileSize)));
                   }();}
              break;}
         _U.badCase($moduleName,
         "between lines 95 and 99");
      }();
   });
   var playerNameMailbox = $Signal.mailbox($Graphics$Input$Field.noContent);
   var clickMailbox = $Signal.mailbox($GameTypes.None);
   var transpGreen = A4($Color.rgba,
   0,
   255,
   0,
   0.5);
   var transparent = A4($Color.rgba,
   0,
   0,
   0,
   0.0);
   var withMargin = F2(function (_v14,
   elt) {
      return function () {
         switch (_v14.ctor)
         {case "_Tuple2":
            return A3(withBorder,
              {ctor: "_Tuple2"
              ,_0: _v14._0
              ,_1: _v14._1},
              transparent,
              elt);}
         _U.badCase($moduleName,
         "on line 250, column 25 to 58");
      }();
   });
   var renderScoreArea = function (state) {
      return A2($Graphics$Element.flow,
      $Graphics$Element.down,
      _L.fromArray([A3($Graphics$Element.container,
                   85,
                   30,
                   $Graphics$Element.middle)($Graphics$Element.centered(A2(playerHandText,
                   $GameTypes.Red,
                   state)))
                   ,withMargin({ctor: "_Tuple2"
                               ,_0: 1
                               ,_1: 6})(A3($Graphics$Element.container,
                   85,
                   40,
                   $Graphics$Element.middle)($Graphics$Element.centered(A2(playerScoreText,
                   $GameTypes.Red,
                   state))))
                   ,withMargin({ctor: "_Tuple2"
                               ,_0: 1
                               ,_1: 14})(renderDeck(state))
                   ,withMargin({ctor: "_Tuple2"
                               ,_0: 1
                               ,_1: 6})(A3($Graphics$Element.container,
                   85,
                   40,
                   $Graphics$Element.middle)($Graphics$Element.centered(A2(playerScoreText,
                   $GameTypes.Blue,
                   state))))
                   ,A3($Graphics$Element.container,
                   85,
                   30,
                   $Graphics$Element.middle)($Graphics$Element.centered(A2(playerHandText,
                   $GameTypes.Blue,
                   state)))]));
   };
   var renderMenu = withMargin({ctor: "_Tuple2"
                               ,_0: 95
                               ,_1: 35})(A2($Graphics$Element.flow,
   $Graphics$Element.down,
   _L.fromArray([withMargin({ctor: "_Tuple2"
                            ,_0: 1
                            ,_1: 3})(A4($Graphics$Input.customButton,
                A2($Signal.message,
                clickMailbox.address,
                $GameTypes.StartSinglePlayer),
                A3($Graphics$Element.image,
                208,
                48,
                "images/buttonSinglePlayer.png"),
                A3($Graphics$Element.image,
                208,
                48,
                "images/buttonSinglePlayer.png"),
                A3($Graphics$Element.image,
                208,
                48,
                "images/buttonSinglePlayer.png")))
                ,withMargin({ctor: "_Tuple2"
                            ,_0: 1
                            ,_1: 3})(A4($Graphics$Input.customButton,
                A2($Signal.message,
                clickMailbox.address,
                $GameTypes.StartTwoPlayerOnline),
                A3($Graphics$Element.image,
                208,
                48,
                "images/button2PlayerOnline.png"),
                A3($Graphics$Element.image,
                208,
                48,
                "images/button2PlayerOnline.png"),
                A3($Graphics$Element.image,
                208,
                48,
                "images/button2PlayerOnline.png")))
                ,withMargin({ctor: "_Tuple2"
                            ,_0: 1
                            ,_1: 3})(A4($Graphics$Input.customButton,
                A2($Signal.message,
                clickMailbox.address,
                $GameTypes.StartTwoPlayerHotseat),
                A3($Graphics$Element.image,
                208,
                48,
                "images/button2PlayerHotseat.png"),
                A3($Graphics$Element.image,
                208,
                48,
                "images/button2PlayerHotseat.png"),
                A3($Graphics$Element.image,
                208,
                48,
                "images/button2PlayerHotseat.png")))
                ,withMargin({ctor: "_Tuple2"
                            ,_0: 1
                            ,_1: 3})(A3($Graphics$Element.image,
                208,
                48,
                "images/buttonViewRules.png"))])));
   var renderLog = function (state) {
      return withMargin({ctor: "_Tuple2"
                        ,_0: 10
                        ,_1: 10})(A3($Graphics$Element.container,
      380,
      262,
      $Graphics$Element.topLeft)($Graphics$Element.flow($Graphics$Element.down)($List.map(function (_v18) {
         return function () {
            switch (_v18.ctor)
            {case "_Tuple2":
               return $Graphics$Element.leftAligned($Text.color(_v18._0)($Text.fromString(_v18._1)));}
            _U.badCase($moduleName,
            "on line 210, column 45 to 95");
         }();
      })($List.take(5)(state.log)))));
   };
   var renderRightArea = function (state) {
      return function () {
         var content = $State.isNotStarted(state) ? renderMenu : renderLog(state);
         return A2(withBorder,
         {ctor: "_Tuple2",_0: 2,_1: 2},
         $Color.darkGrey)(A3($Graphics$Element.container,
         400,
         282,
         $Graphics$Element.middle)(content));
      }();
   };
   var handTileSize = 100;
   var handPadding = 10;
   var renderHand = F2(function (player,
   state) {
      return function () {
         var hiddenPiece = A3($Graphics$Element.image,
         $Basics.round(handTileSize),
         $Basics.round(handTileSize),
         "images/100/back2.png");
         var pieceSize = $Basics.round(handTileSize) + handPadding;
         var dummyHand = A2($List.repeat,
         5,
         A3($Graphics$Element.container,
         pieceSize,
         pieceSize,
         $Graphics$Element.middle)(hiddenPiece));
         var pieceImage = function (pieceStr) {
            return pieceToImage($Piece.fromString(pieceStr));
         };
         var isPieceHeld = function (idx) {
            return _U.eq(state.turn,
            player) && _U.eq(state.heldPiece,
            $Maybe.Just(idx));
         };
         var makePiece = F2(function (idx,
         pieceStr) {
            return $Graphics$Input.clickable(A2($Signal.message,
            clickMailbox.address,
            A2($GameTypes.PieceInHand,
            player,
            idx)))($Graphics$Element.color(isPieceHeld(idx) ? $Player.toColor(state.turn) : $Color.white)(A3($Graphics$Element.container,
            pieceSize,
            pieceSize,
            $Graphics$Element.middle)(A3(pieceImage,
            pieceStr,
            $Basics.toString($Piece.baseValue($Piece.fromString(pieceStr))),
            handTileSize))));
         });
         var hand = A2($Player.getHand,
         player,
         state);
         var playerHand = $List.isEmpty(hand) && _U.eq(state.gameState,
         $GameTypes.Ongoing) ? _L.fromArray([A3($Graphics$Element.container,
         100,
         100,
         $Graphics$Element.middle)(A2($Graphics$Input.button,
         A2($Signal.message,
         clickMailbox.address,
         $GameTypes.PassButton),
         "Pass"))]) : A2($List.indexedMap,
         makePiece,
         hand);
         var cpuHand = A2($List.map,
         function (x) {
            return A3($Graphics$Element.container,
            pieceSize,
            pieceSize,
            $Graphics$Element.middle)(hiddenPiece);
         },
         hand);
         var p = $Player.toString(player);
         var playerType = A2($Maybe.withDefault,
         $GameTypes.Human,
         A2($Dict.get,p,state.players));
         var handContents = $State.isNotStarted(state) ? dummyHand : _U.eq(playerType,
         $GameTypes.Human) ? playerHand : cpuHand;
         return A2($Graphics$Element.flow,
         $Graphics$Element.right,
         handContents);
      }();
   });
   var renderSidebar = function (state) {
      return A2($Graphics$Element.flow,
      $Graphics$Element.down,
      _L.fromArray([A3($Graphics$Element.image,
                   582,
                   82,
                   "images/100/kalevala.png")
                   ,withMargin({ctor: "_Tuple2"
                               ,_0: 12
                               ,_1: 11})(A2($Graphics$Element.flow,
                   $Graphics$Element.down,
                   _L.fromArray([A2(renderHand,
                                $GameTypes.Red,
                                state)
                                ,A2($Graphics$Element.flow,
                                $Graphics$Element.right,
                                _L.fromArray([withMargin({ctor: "_Tuple2"
                                                         ,_0: 16
                                                         ,_1: 11})(renderScoreArea(state))
                                             ,withMargin({ctor: "_Tuple2"
                                                         ,_0: 13
                                                         ,_1: 19})(renderRightArea(state))]))
                                ,A2(renderHand,
                                $GameTypes.Blue,
                                state)])))]));
   };
   var gameMargin = 15;
   var getTotalBoardSize = function (_v22) {
      return function () {
         switch (_v22.ctor)
         {case "_Tuple2":
            return _v22._1 - 2 * gameMargin;}
         _U.badCase($moduleName,
         "on line 52, column 37 to 61");
      }();
   };
   var getTileSizeFromBoardSize = F2(function (boardSize,
   dims) {
      return $Basics.toFloat(getTotalBoardSize(dims) / boardSize | 0);
   });
   var drawGrid = F3(function (state,
   boardSize,
   dims) {
      return function () {
         var tileSize = A2(getTileSizeFromBoardSize,
         boardSize,
         dims);
         var totalSize = $Basics.toFloat(boardSize) * tileSize;
         var offset = tileSize / 2 - totalSize / 2;
         var shape = F2(function (x,y) {
            return function () {
               var imgSize = _U.cmp(tileSize,
               75) > 0 ? 100 : 50;
               var tile = A2($Basics._op["++"],
               "images/",
               A2($Basics._op["++"],
               $Basics.toString(imgSize),
               A2($Basics._op["++"],
               "/board",
               A2($Basics._op["++"],
               $Basics.toString(A2($Basics._op["%"],
               Math.pow(x,2) + 7 * y,
               6)),
               ".png"))));
               var pos = {ctor: "_Tuple2"
                         ,_0: tileSize * $Basics.toFloat(x) + offset
                         ,_1: tileSize * $Basics.toFloat(y) + offset};
               return A2($Graphics$Collage.move,
               pos,
               $Graphics$Collage.toForm(A3($Graphics$Element.image,
               $Basics.round(tileSize),
               $Basics.round(tileSize),
               tile)));
            }();
         });
         return A2($List.concatMap,
         function (x) {
            return A2($List.map,
            function (y) {
               return A2(shape,x,y);
            },
            _L.range(0,boardSize - 1));
         },
         _L.range(0,boardSize - 1));
      }();
   });
   var drawAvailableOverlay = F3(function (state,
   boardSize,
   dims) {
      return function () {
         var tileSize = A2(getTileSizeFromBoardSize,
         boardSize,
         dims);
         var totalSize = $Basics.toFloat(boardSize) * tileSize;
         var offset = tileSize / 2 - totalSize / 2;
         var shape = F2(function (x,y) {
            return function () {
               var color = A3($Board.isValidSquareToMove,
               state,
               {ctor: "_Tuple2",_0: x,_1: y},
               boardSize) ? transpGreen : transparent;
               var pos = {ctor: "_Tuple2"
                         ,_0: tileSize * $Basics.toFloat(x) + offset
                         ,_1: tileSize * $Basics.toFloat(y) + offset};
               return A2($Graphics$Collage.move,
               pos,
               A2($Graphics$Collage.filled,
               color,
               $Graphics$Collage.square(tileSize)));
            }();
         });
         return A2($List.concatMap,
         function (x) {
            return A2($List.map,
            function (y) {
               return A2(shape,x,y);
            },
            _L.range(0,boardSize - 1));
         },
         _L.range(0,boardSize - 1));
      }();
   });
   var renderBoard = F3(function (state,
   boardSize,
   dims) {
      return function () {
         var overlay = A3(drawAvailableOverlay,
         state,
         boardSize,
         dims);
         var grid = A3(drawGrid,
         state,
         boardSize,
         dims);
         var tileSize = A2(getTileSizeFromBoardSize,
         boardSize,
         dims);
         var size = boardSize * $Basics.round(tileSize) + 1;
         var pieces = A2($List.map,
         function (p) {
            return A3(drawPiece,
            p,
            state.board,
            tileSize);
         },
         $Dict.toList(state.board));
         var outline = A2(drawLastPlacedOutline,
         state,
         tileSize);
         var board = A3($Graphics$Collage.collage,
         size,
         size,
         A2($Basics._op["++"],
         grid,
         A2($Basics._op["++"],
         pieces,
         A2($Basics._op["++"],
         overlay,
         outline))));
         return A2($Graphics$Input.clickable,
         A2($Signal.message,
         clickMailbox.address,
         $GameTypes.BoardClick),
         board);
      }();
   });
   var renderGameArea = F3(function (state,
   dims,
   playerName) {
      return function () {
         var boardSize = $Board.getBoardSize(state.board);
         return A2($Graphics$Element.flow,
         $Graphics$Element.right,
         _L.fromArray([A3(renderBoard,
                      state,
                      boardSize,
                      dims)
                      ,A2($Graphics$Element.spacer,
                      16,
                      1)
                      ,renderSidebar(state)]));
      }();
   });
   var mouseToBoardPosition = F3(function (_v26,
   state,
   dims) {
      return function () {
         switch (_v26.ctor)
         {case "_Tuple2":
            return function () {
                 var boardSize = $Board.getBoardSize(state.board);
                 var tileSize = $Basics.round(A2(getTileSizeFromBoardSize,
                 boardSize,
                 dims));
                 var offset = boardSize / 2 | 0;
                 var y = _v26._1 - gameMargin;
                 var boardY = 0 - ((y / tileSize | 0) - offset);
                 var x = _v26._0 - gameMargin;
                 var boardX = (x / tileSize | 0) - offset;
                 return {ctor: "_Tuple2"
                        ,_0: boardX
                        ,_1: boardY};
              }();}
         _U.badCase($moduleName,
         "between lines 59 and 66");
      }();
   });
   var render = F3(function (state,
   dims,
   playerName) {
      return withMargin({ctor: "_Tuple2"
                        ,_0: gameMargin
                        ,_1: gameMargin})(A3(renderGameArea,
      state,
      dims,
      playerName));
   });
   _elm.Display.values = {_op: _op
                         ,gameMargin: gameMargin
                         ,handPadding: handPadding
                         ,handTileSize: handTileSize
                         ,transparent: transparent
                         ,transpGreen: transpGreen
                         ,clickMailbox: clickMailbox
                         ,playerNameMailbox: playerNameMailbox
                         ,getTotalBoardSize: getTotalBoardSize
                         ,getTileSizeFromBoardSize: getTileSizeFromBoardSize
                         ,mouseToBoardPosition: mouseToBoardPosition
                         ,pieceToImage: pieceToImage
                         ,drawGrid: drawGrid
                         ,drawPiece: drawPiece
                         ,drawAvailableOverlay: drawAvailableOverlay
                         ,drawLastPlacedOutline: drawLastPlacedOutline
                         ,renderBoard: renderBoard
                         ,renderHand: renderHand
                         ,renderDeck: renderDeck
                         ,renderScoreArea: renderScoreArea
                         ,renderMenu: renderMenu
                         ,renderLog: renderLog
                         ,renderPieceDescription: renderPieceDescription
                         ,renderRightArea: renderRightArea
                         ,renderSidebar: renderSidebar
                         ,renderGameArea: renderGameArea
                         ,render: render
                         ,withMargin: withMargin
                         ,withBorder: withBorder
                         ,playerHandText: playerHandText
                         ,playerScoreText: playerScoreText};
   return _elm.Display.values;
};