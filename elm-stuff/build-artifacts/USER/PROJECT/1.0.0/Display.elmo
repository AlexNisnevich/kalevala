Elm.Display = Elm.Display || {};
Elm.Display.make = function (_elm) {
   "use strict";
   _elm.Display = _elm.Display || {};
   if (_elm.Display.values)
   return _elm.Display.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Display",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Display$Board = Elm.Display.Board.make(_elm),
   $Display$Constants = Elm.Display.Constants.make(_elm),
   $Display$Helpers = Elm.Display.Helpers.make(_elm),
   $Game = Elm.Game.make(_elm),
   $GameTypes = Elm.GameTypes.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Graphics$Input = Elm.Graphics.Input.make(_elm),
   $Graphics$Input$Field = Elm.Graphics.Input.Field.make(_elm),
   $List = Elm.List.make(_elm),
   $Log = Elm.Log.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Piece = Elm.Piece.make(_elm),
   $Player = Elm.Player.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $State = Elm.State.make(_elm),
   $String = Elm.String.make(_elm),
   $Text = Elm.Text.make(_elm);
   var passTurnDisabledButton = A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Pass_Turn-H.png");
   var renderPieceDescription = function (piece) {
      return A2($Graphics$Element.flow,
      $Graphics$Element.down,
      _L.fromArray([A2($Graphics$Element.spacer,
                   1,
                   10)
                   ,A3($Graphics$Element.container,
                   380,
                   158,
                   $Graphics$Element.topLeft)(A2($Graphics$Element.flow,
                   $Graphics$Element.down,
                   _L.fromArray([$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                             ,_0: 5
                                                             ,_1: 1})($Graphics$Element.width(370)($Graphics$Element.leftAligned($Text.height(40)($Text.fromString($Piece.toDisplayString(piece))))))
                                ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                             ,_0: 30
                                                             ,_1: 1})($Graphics$Element.width(320)($Graphics$Element.leftAligned($Text.height(16)($Text.fromString($Piece.flavorText(piece))))))])))
                   ,A3($Graphics$Collage.collage,
                   380,
                   46,
                   _L.fromArray([$Graphics$Collage.traced(_U.replace([["width"
                                                                      ,2]
                                                                     ,["color"
                                                                      ,$Color.darkGrey]],
                   $Graphics$Collage.defaultLine))(A2($Graphics$Collage.segment,
                   {ctor: "_Tuple2"
                   ,_0: -170.0
                   ,_1: 0.0},
                   {ctor: "_Tuple2"
                   ,_0: 170.0
                   ,_1: 0.0}))]))
                   ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                ,_0: 10
                                                ,_1: 1})(A3($Graphics$Element.container,
                   360,
                   80,
                   $Graphics$Element.topLeft)($Graphics$Element.width(360)($Graphics$Element.leftAligned($Text.height(18)($Text.fromString($Piece.rulesText(piece)))))))]));
   };
   var renderDeck = function (state) {
      return function () {
         var deckSize = $State.isNotStarted(state) ? $List.length($Game.deckContents) : $State.isOngoing(state) ? $List.length(state.deck) : 0;
         var deckSizeStr = A2($Basics._op["++"],
         "Deck : ",
         $Basics.toString(deckSize));
         var deckImage = _U.eq(deckSize,
         0) ? "images/Other/Deck-0.png" : _U.eq(deckSize,
         1) ? "images/Other/Deck-1.png" : _U.eq(deckSize,
         2) ? "images/Other/Deck-2.png" : _U.eq(deckSize,
         3) ? "images/Other/Deck-3.png" : "images/Other/Deck-4.png";
         return A2($Graphics$Element.flow,
         $Graphics$Element.down,
         _L.fromArray([A3($Graphics$Element.image,
                      85,
                      85,
                      deckImage)
                      ,A3($Graphics$Element.container,
                      85,
                      20,
                      $Graphics$Element.midBottom)($Graphics$Element.centered($Text.height(14)($Text.fromString(deckSizeStr))))]));
      }();
   };
   var playerScoreText = F2(function (player,
   state) {
      return function () {
         var p = $Player.toString(player);
         return $Text.height(40)($Text.color($Player.toColor(player))($Text.fromString($Basics.toString($Maybe.withDefault(0)(A2($Dict.get,
         p,
         state.score))))));
      }();
   });
   var playerHandText = F3(function (player,
   state,
   playerName) {
      return function () {
         var p = $Player.toString(player);
         var playerType = A2($Maybe.withDefault,
         $GameTypes.Human,
         A2($Dict.get,p,state.players));
         var text = function () {
            var _v0 = state.gameType;
            switch (_v0.ctor)
            {case "HumanVsCpu":
               return function () {
                    switch (playerType.ctor)
                    {case "Cpu": return "CPU";
                       case "Human": return "Player";}
                    _U.badCase($moduleName,
                    "between lines 134 and 137");
                 }();
               case "HumanVsHumanLocal":
               return $Basics.toString(player);
               case "HumanVsHumanRemote":
               return function () {
                    switch (playerType.ctor)
                    {case "Human":
                       return playerName.string;}
                    return $State.isNotStarted(state) ? "?" : A2($Maybe.withDefault,
                    "?",
                    A2($Dict.get,
                    p,
                    state.playerNames));
                 }();}
            _U.badCase($moduleName,
            "between lines 133 and 143");
         }();
         return $Text.height(20)($Text.color($Player.toColor(player))((_U.eq(state.turn,
         player) && $State.isOngoing(state) ? $Text.bold : $Basics.identity)($Text.fromString($String.toUpper(text)))));
      }();
   });
   var renderScoreArea = F2(function (state,
   playerName) {
      return A2($Graphics$Element.flow,
      $Graphics$Element.down,
      _L.fromArray([A3($Graphics$Element.container,
                   85,
                   30,
                   $Graphics$Element.middle)($Graphics$Element.centered(A3(playerHandText,
                   $GameTypes.Red,
                   state,
                   playerName)))
                   ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                ,_0: 1
                                                ,_1: 6})(A3($Graphics$Element.container,
                   85,
                   40,
                   $Graphics$Element.middle)($Graphics$Element.centered(A2(playerScoreText,
                   $GameTypes.Red,
                   state))))
                   ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                ,_0: 1
                                                ,_1: 14})(renderDeck(state))
                   ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                ,_0: 1
                                                ,_1: 6})(A3($Graphics$Element.container,
                   85,
                   40,
                   $Graphics$Element.middle)($Graphics$Element.centered(A2(playerScoreText,
                   $GameTypes.Blue,
                   state))))
                   ,A3($Graphics$Element.container,
                   85,
                   30,
                   $Graphics$Element.middle)($Graphics$Element.centered(A3(playerHandText,
                   $GameTypes.Blue,
                   state,
                   playerName)))]));
   });
   var playerNameMailbox = $Signal.mailbox($Graphics$Input$Field.noContent);
   var playerNameSignal = function () {
      var limitTo6Chars = function (content) {
         return _U.replace([["string"
                            ,A2($String.left,
                            6,
                            content.string)]],
         content);
      };
      return A2($Signal.map,
      limitTo6Chars,
      playerNameMailbox.signal);
   }();
   var clickMailbox = $Signal.mailbox($GameTypes.None);
   var renderBoard = F2(function (state,
   dims) {
      return function () {
         var boardSize = $Display$Board.getBoardSize(state);
         var tileSize = A2($Display$Board.getTileSizeFromBoardSize,
         boardSize,
         dims);
         var pieces = A2($List.map,
         function (p) {
            return A3($Display$Board.drawPiece,
            p,
            state.board,
            tileSize);
         },
         $Dict.toList(state.board));
         var outline = A2($Display$Board.drawLastPlacedOutline,
         state,
         tileSize);
         var size = boardSize * $Basics.round(tileSize) + 1;
         var grid = A3($Display$Board.drawGrid,
         state,
         boardSize,
         dims);
         var overlay = A3($Display$Board.drawAvailableOverlay,
         state,
         boardSize,
         dims);
         var board = A3($Graphics$Collage.collage,
         size,
         size,
         A2($Basics._op["++"],
         grid,
         A2($Basics._op["++"],
         pieces,
         A2($Basics._op["++"],
         outline,
         overlay))));
         return A2($Graphics$Input.clickable,
         A2($Signal.message,
         clickMailbox.address,
         $GameTypes.BoardClick),
         board);
      }();
   });
   var renderHand = F2(function (player,
   state) {
      return function () {
         var combineWith = F2(function (elt1,
         elt2) {
            return A2($Graphics$Element.flow,
            $Graphics$Element.inward,
            _L.fromArray([elt1,elt2]));
         });
         var placeholderPiece = A3($Graphics$Element.image,
         $Display$Constants.handTileSize,
         $Display$Constants.handTileSize,
         "images/100/No_Tile.png");
         var hiddenPiece = A3($Graphics$Element.image,
         $Display$Constants.handTileSize,
         $Display$Constants.handTileSize,
         "images/100/Tile_Back.png");
         var pieceSize = $Display$Constants.handTileSize + $Display$Constants.handPadding;
         var dummyHand = A2($List.repeat,
         5,
         A3($Graphics$Element.container,
         pieceSize,
         pieceSize,
         $Graphics$Element.middle)(placeholderPiece));
         var pieceImage = function (pieceStr) {
            return $Display$Helpers.pieceToImage($Piece.fromString(pieceStr));
         };
         var isPieceHeld = function (idx) {
            return _U.eq(state.turn,
            player) && _U.eq(state.heldPiece,
            $Maybe.Just(idx));
         };
         var makePiece = F2(function (idx,
         pieceStr) {
            return $Graphics$Input.clickable(A2($Signal.message,
            clickMailbox.address,
            A2($GameTypes.PieceInHand,
            player,
            idx)))(A3($Graphics$Element.container,
            pieceSize,
            pieceSize,
            $Graphics$Element.middle)(combineWith(isPieceHeld(idx) ? A3($Graphics$Element.image,
            $Display$Constants.handTileSize,
            $Display$Constants.handTileSize,
            A2($Basics._op["++"],
            "images/100/",
            A2($Basics._op["++"],
            $Player.toString(state.turn),
            "-H.png"))) : $Graphics$Element.empty)(A3(pieceImage,
            pieceStr,
            $Basics.toString($Piece.baseValue($Piece.fromString(pieceStr))),
            $Basics.toFloat($Display$Constants.handTileSize)))));
         });
         var hand = A2($Player.getHand,
         player,
         state);
         var playerHand = A2($List.indexedMap,
         makePiece,
         hand);
         var cpuHand = A2($List.map,
         function (x) {
            return A3($Graphics$Element.container,
            pieceSize,
            pieceSize,
            $Graphics$Element.middle)(hiddenPiece);
         },
         hand);
         var p = $Player.toString(player);
         var playerType = A2($Maybe.withDefault,
         $GameTypes.Human,
         A2($Dict.get,p,state.players));
         var handContents = $State.isNotStarted(state) || $State.isSwitchingPlayers(state) ? dummyHand : _U.eq(playerType,
         $GameTypes.Human) ? playerHand : cpuHand;
         return A3($Graphics$Element.container,
         ($Display$Constants.handTileSize + $Display$Constants.handPadding) * 5,
         $Display$Constants.handTileSize + $Display$Constants.handPadding,
         $Graphics$Element.topLeft)(A2($Graphics$Element.flow,
         $Graphics$Element.right,
         handContents));
      }();
   });
   var startSinglePlayerButton = A4($Graphics$Input.customButton,
   A2($Signal.message,
   clickMailbox.address,
   $GameTypes.StartSinglePlayer),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Single_Player.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Single_Player-H.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Single_Player-H.png"));
   var startRemoteButton = A4($Graphics$Input.customButton,
   A2($Signal.message,
   clickMailbox.address,
   $GameTypes.StartRemoteGameButton),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/2P_Online.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/2P_Online-H.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/2P_Online-H.png"));
   var startHotseatButton = A4($Graphics$Input.customButton,
   A2($Signal.message,
   clickMailbox.address,
   $GameTypes.StartTwoPlayerHotseat),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/2P_Hotseat.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/2P_Hotseat-H.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/2P_Hotseat-H.png"));
   var viewRulesButton = $Graphics$Element.link("rules.html")(A4($Graphics$Input.customButton,
   A2($Signal.message,
   clickMailbox.address,
   $GameTypes.None),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/View_Rules.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/View_Rules-H.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/View_Rules-H.png")));
   var renderMenu = $Display$Helpers.withMargin({ctor: "_Tuple2"
                                                ,_0: 95
                                                ,_1: 35})(A2($Graphics$Element.flow,
   $Graphics$Element.down,
   _L.fromArray([$Display$Helpers.withMargin({ctor: "_Tuple2"
                                             ,_0: 1
                                             ,_1: 3})(startSinglePlayerButton)
                ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                             ,_0: 1
                                             ,_1: 3})(startRemoteButton)
                ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                             ,_0: 1
                                             ,_1: 3})(startHotseatButton)
                ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                             ,_0: 1
                                             ,_1: 3})(viewRulesButton)])));
   var backToMainMenuButton = A4($Graphics$Input.customButton,
   A2($Signal.message,
   clickMailbox.address,
   $GameTypes.MainMenuButton),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Back.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Back-H.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Back-H.png"));
   var startRemoteGameConfirmButton = A4($Graphics$Input.customButton,
   A2($Signal.message,
   clickMailbox.address,
   $GameTypes.StartTwoPlayerOnline),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Confirm.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Confirm-H.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Confirm-H.png"));
   var renderRemoteSetupMenu = function (playerName) {
      return A2($Graphics$Element.flow,
      $Graphics$Element.down,
      _L.fromArray([A3($Graphics$Element.container,
                   380,
                   100,
                   $Graphics$Element.midBottom)($Graphics$Element.centered($Text.fromString("Enter player name : ")))
                   ,A2($Graphics$Element.spacer,
                   1,
                   20)
                   ,A3($Graphics$Element.container,
                   380,
                   110,
                   $Graphics$Element.midTop)(A4($Graphics$Input$Field.field,
                   $Graphics$Input$Field.defaultStyle,
                   $Signal.message(playerNameMailbox.address),
                   "Your name",
                   playerName))
                   ,A2($Graphics$Element.flow,
                   $Graphics$Element.right,
                   _L.fromArray([backToMainMenuButton
                                ,startRemoteGameConfirmButton]))]));
   };
   var passTurnButton = A4($Graphics$Input.customButton,
   A2($Signal.message,
   clickMailbox.address,
   $GameTypes.PassButton),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Pass_Turn.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Pass_Turn-H.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Pass_Turn-H.png"));
   var switchButton = A4($Graphics$Input.customButton,
   A2($Signal.message,
   clickMailbox.address,
   $GameTypes.SwitchButton),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Switch.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Switch-H.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Switch-H.png"));
   var quitGameButton = A4($Graphics$Input.customButton,
   A2($Signal.message,
   clickMailbox.address,
   $GameTypes.MainMenuButton),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Quit_Game.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Quit_Game-H.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Quit_Game-H.png"));
   var mainMenuButton = A4($Graphics$Input.customButton,
   A2($Signal.message,
   clickMailbox.address,
   $GameTypes.MainMenuButton),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Main_Menu.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Main_Menu-H.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/Main_Menu-H.png"));
   var newGameButton = A4($Graphics$Input.customButton,
   A2($Signal.message,
   clickMailbox.address,
   $GameTypes.StartNewGameButton),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/New_Game.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/New_Game-H.png"),
   A3($Graphics$Element.image,
   196,
   46,
   "images/Buttons/New_Game-H.png"));
   var renderLog = function (state) {
      return function () {
         var currentTurnAndSwitchButton = A2($Graphics$Element.flow,
         $Graphics$Element.right,
         _L.fromArray([A3($Graphics$Element.container,
                      196,
                      48,
                      $Graphics$Element.middle)($Graphics$Element.leftAligned($Text.height(18)($Text.color($Player.toColor(state.turn))($Text.fromString(A2($Basics._op["++"],
                      $Player.toString(state.turn),
                      "\'s Turn"))))))
                      ,switchButton]));
         var passAndQuitButtons = A2($Graphics$Element.flow,
         $Graphics$Element.right,
         _L.fromArray([_U.eq(A2($Player.getType,
                      state.turn,
                      state),
                      $GameTypes.Human) ? passTurnButton : passTurnDisabledButton
                      ,quitGameButton]));
         var mainMenuAndNewGameButtons = A2($Graphics$Element.flow,
         $Graphics$Element.right,
         _L.fromArray([mainMenuButton
                      ,newGameButton]));
         var backAndRulesButtons = A2($Graphics$Element.flow,
         $Graphics$Element.right,
         _L.fromArray([backToMainMenuButton
                      ,viewRulesButton]));
         var buttons = function () {
            var _v3 = state.gameState;
            switch (_v3.ctor)
            {case "Disconnected":
               return backAndRulesButtons;
               case "GameOver":
               return mainMenuAndNewGameButtons;
               case "WaitingForPlayers":
               return backAndRulesButtons;}
            return $State.isSwitchingPlayers(state) ? currentTurnAndSwitchButton : passAndQuitButtons;
         }();
         return A2($Graphics$Element.flow,
         $Graphics$Element.down,
         _L.fromArray([A3($Graphics$Element.container,
                      390,
                      220,
                      $Graphics$Element.midTop)(A2($Log.display,
                      {ctor: "_Tuple2"
                      ,_0: 390
                      ,_1: 168},
                      state.log))
                      ,buttons]));
      }();
   };
   var renderRightArea = F2(function (state,
   playerName) {
      return function () {
         var content = $State.isAtMainMenu(state) ? renderMenu : $State.isSettingUpRemoteGame(state) ? renderRemoteSetupMenu(playerName) : function () {
            var _v4 = $State.pieceHeld(state);
            switch (_v4.ctor)
            {case "Just":
               return renderPieceDescription(_v4._0);
               case "Nothing":
               return renderLog(state);}
            _U.badCase($moduleName,
            "between lines 185 and 188");
         }();
         return A2($Display$Helpers.withBorder,
         {ctor: "_Tuple2",_0: 2,_1: 2},
         $Color.darkGrey)(A3($Graphics$Element.container,
         410,
         $Display$Constants.sidebarRightAreaHeight,
         $Graphics$Element.middle)(content));
      }();
   });
   var renderSidebar = F3(function (state,
   _v6,
   playerName) {
      return function () {
         switch (_v6.ctor)
         {case "_Tuple2":
            return function () {
                 var sidebarInnerPaddingHeight = ($Display$Board.getTotalBoardSize({ctor: "_Tuple2"
                                                                                   ,_0: _v6._0
                                                                                   ,_1: _v6._1}) - $Display$Constants.minSidebarHeight) / 2 | 0;
                 return A2($Graphics$Element.flow,
                 $Graphics$Element.down,
                 _L.fromArray([A3($Graphics$Element.image,
                              $Display$Constants.sidebarWidth,
                              $Display$Constants.sidebarImageHeight,
                              "images/Other/Kalevala.png")
                              ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                           ,_0: 12
                                                           ,_1: 11})(A2($Graphics$Element.flow,
                              $Graphics$Element.down,
                              _L.fromArray([A2(renderHand,
                                           $GameTypes.Red,
                                           state)
                                           ,A2($Graphics$Element.spacer,
                                           1,
                                           sidebarInnerPaddingHeight)
                                           ,A2($Graphics$Element.flow,
                                           $Graphics$Element.right,
                                           _L.fromArray([$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                                                     ,_0: 16
                                                                                     ,_1: 11})(A2(renderScoreArea,
                                                        state,
                                                        playerName))
                                                        ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                                                     ,_0: 13
                                                                                     ,_1: 19})(A2(renderRightArea,
                                                        state,
                                                        playerName))]))
                                           ,A2($Graphics$Element.spacer,
                                           1,
                                           sidebarInnerPaddingHeight)
                                           ,A2(renderHand,
                                           $GameTypes.Blue,
                                           state)])))]));
              }();}
         _U.badCase($moduleName,
         "between lines 74 and 85");
      }();
   });
   var renderGameArea = F3(function (state,
   dims,
   playerName) {
      return A2($Graphics$Element.flow,
      $Graphics$Element.right,
      _L.fromArray([A2(renderBoard,
                   state,
                   dims)
                   ,A2($Graphics$Element.spacer,
                   $Display$Constants.gameMargin,
                   1)
                   ,A3(renderSidebar,
                   state,
                   dims,
                   playerName)]));
   });
   var render = F3(function (state,
   dims,
   playerName) {
      return $Display$Helpers.withMargin({ctor: "_Tuple2"
                                         ,_0: $Display$Constants.gameMargin
                                         ,_1: $Display$Constants.gameMargin})(A3(renderGameArea,
      state,
      dims,
      playerName));
   });
   _elm.Display.values = {_op: _op
                         ,clickMailbox: clickMailbox
                         ,playerNameMailbox: playerNameMailbox
                         ,playerNameSignal: playerNameSignal
                         ,render: render
                         ,renderGameArea: renderGameArea
                         ,renderBoard: renderBoard
                         ,renderSidebar: renderSidebar
                         ,renderHand: renderHand
                         ,renderScoreArea: renderScoreArea
                         ,playerHandText: playerHandText
                         ,playerScoreText: playerScoreText
                         ,renderDeck: renderDeck
                         ,renderRightArea: renderRightArea
                         ,renderMenu: renderMenu
                         ,renderLog: renderLog
                         ,renderPieceDescription: renderPieceDescription
                         ,renderRemoteSetupMenu: renderRemoteSetupMenu
                         ,startSinglePlayerButton: startSinglePlayerButton
                         ,startRemoteButton: startRemoteButton
                         ,startHotseatButton: startHotseatButton
                         ,viewRulesButton: viewRulesButton
                         ,backToMainMenuButton: backToMainMenuButton
                         ,startRemoteGameConfirmButton: startRemoteGameConfirmButton
                         ,passTurnButton: passTurnButton
                         ,passTurnDisabledButton: passTurnDisabledButton
                         ,switchButton: switchButton
                         ,quitGameButton: quitGameButton
                         ,mainMenuButton: mainMenuButton
                         ,newGameButton: newGameButton};
   return _elm.Display.values;
};