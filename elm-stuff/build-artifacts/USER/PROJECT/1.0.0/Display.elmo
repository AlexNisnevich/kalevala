Elm.Display = Elm.Display || {};
Elm.Display.make = function (_elm) {
   "use strict";
   _elm.Display = _elm.Display || {};
   if (_elm.Display.values)
   return _elm.Display.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Display",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $Display$Board = Elm.Display.Board.make(_elm),
   $Display$Constants = Elm.Display.Constants.make(_elm),
   $Display$Helpers = Elm.Display.Helpers.make(_elm),
   $Game = Elm.Game.make(_elm),
   $GameTypes = Elm.GameTypes.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Graphics$Input = Elm.Graphics.Input.make(_elm),
   $Graphics$Input$Field = Elm.Graphics.Input.Field.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Piece = Elm.Piece.make(_elm),
   $Player = Elm.Player.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $State = Elm.State.make(_elm),
   $String = Elm.String.make(_elm),
   $Text = Elm.Text.make(_elm);
   var renderRemoteConnecting = A3($Graphics$Element.container,
   300,
   30,
   $Graphics$Element.middle)($Graphics$Element.centered($Text.fromString("Waiting for opponent ...")));
   var renderPieceDescription = function (piece) {
      return A2($Graphics$Element.flow,
      $Graphics$Element.down,
      _L.fromArray([A2($Graphics$Element.spacer,
                   1,
                   10)
                   ,A3($Graphics$Element.container,
                   380,
                   158,
                   $Graphics$Element.topLeft)(A2($Graphics$Element.flow,
                   $Graphics$Element.down,
                   _L.fromArray([$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                             ,_0: 5
                                                             ,_1: 1})($Graphics$Element.width(370)($Graphics$Element.leftAligned($Text.height(40)($Text.fromString($Piece.toDisplayString(piece))))))
                                ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                             ,_0: 30
                                                             ,_1: 1})($Graphics$Element.width(320)($Graphics$Element.leftAligned($Text.height(16)($Text.fromString($Piece.flavorText(piece))))))])))
                   ,A3($Graphics$Collage.collage,
                   380,
                   46,
                   _L.fromArray([$Graphics$Collage.traced(_U.replace([["width"
                                                                      ,2]
                                                                     ,["color"
                                                                      ,$Color.darkGrey]],
                   $Graphics$Collage.defaultLine))(A2($Graphics$Collage.segment,
                   {ctor: "_Tuple2"
                   ,_0: -170.0
                   ,_1: 0.0},
                   {ctor: "_Tuple2"
                   ,_0: 170.0
                   ,_1: 0.0}))]))
                   ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                ,_0: 10
                                                ,_1: 1})(A3($Graphics$Element.container,
                   360,
                   80,
                   $Graphics$Element.topLeft)($Graphics$Element.width(360)($Graphics$Element.leftAligned($Text.height(18)($Text.fromString($Piece.rulesText(piece)))))))]));
   };
   var renderDeck = function (state) {
      return function () {
         var deckSize = $State.isNotStarted(state) ? $List.length($Game.deckContents) : $State.isOngoing(state) ? $List.length(state.deck) : 0;
         var deckSizeStr = A2($Basics._op["++"],
         "Deck : ",
         $Basics.toString(deckSize));
         return A2($Graphics$Element.flow,
         $Graphics$Element.down,
         _L.fromArray([A3($Graphics$Element.image,
                      85,
                      85,
                      "images/100/deck.png")
                      ,A3($Graphics$Element.container,
                      85,
                      20,
                      $Graphics$Element.midBottom)($Graphics$Element.centered($Text.height(14)($Text.fromString(deckSizeStr))))]));
      }();
   };
   var playerScoreText = F2(function (player,
   state) {
      return function () {
         var p = $Player.toString(player);
         return $Text.height(40)($Text.color($Player.toColor(player))($Text.fromString($Basics.toString($Maybe.withDefault(0)(A2($Dict.get,
         p,
         state.score))))));
      }();
   });
   var playerHandText = F2(function (player,
   state) {
      return function () {
         var p = $Player.toString(player);
         var playerType = A2($Maybe.withDefault,
         $GameTypes.Human,
         A2($Dict.get,p,state.players));
         return $Text.height(20)($Text.color($Player.toColor(player))((_U.eq(state.turn,
         player) && $State.isOngoing(state) ? $Text.bold : $Basics.identity)($Text.fromString($String.toUpper(function (t) {
            return _U.eq(t,
            "Human") ? "Player" : t;
         }($Basics.toString(playerType)))))));
      }();
   });
   var renderScoreArea = function (state) {
      return A2($Graphics$Element.flow,
      $Graphics$Element.down,
      _L.fromArray([A3($Graphics$Element.container,
                   85,
                   30,
                   $Graphics$Element.middle)($Graphics$Element.centered(A2(playerHandText,
                   $GameTypes.Red,
                   state)))
                   ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                ,_0: 1
                                                ,_1: 6})(A3($Graphics$Element.container,
                   85,
                   40,
                   $Graphics$Element.middle)($Graphics$Element.centered(A2(playerScoreText,
                   $GameTypes.Red,
                   state))))
                   ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                ,_0: 1
                                                ,_1: 14})(renderDeck(state))
                   ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                ,_0: 1
                                                ,_1: 6})(A3($Graphics$Element.container,
                   85,
                   40,
                   $Graphics$Element.middle)($Graphics$Element.centered(A2(playerScoreText,
                   $GameTypes.Blue,
                   state))))
                   ,A3($Graphics$Element.container,
                   85,
                   30,
                   $Graphics$Element.middle)($Graphics$Element.centered(A2(playerHandText,
                   $GameTypes.Blue,
                   state)))]));
   };
   var playerNameMailbox = $Signal.mailbox($Graphics$Input$Field.noContent);
   var clickMailbox = $Signal.mailbox($GameTypes.None);
   var renderBoard = F2(function (state,
   dims) {
      return function () {
         var boardSize = $Display$Board.getBoardSize(state);
         var tileSize = A2($Display$Board.getTileSizeFromBoardSize,
         boardSize,
         dims);
         var pieces = A2($List.map,
         function (p) {
            return A3($Display$Board.drawPiece,
            p,
            state.board,
            tileSize);
         },
         $Dict.toList(state.board));
         var outline = A2($Display$Board.drawLastPlacedOutline,
         state,
         tileSize);
         var size = boardSize * $Basics.round(tileSize) + 1;
         var grid = A3($Display$Board.drawGrid,
         state,
         boardSize,
         dims);
         var overlay = A3($Display$Board.drawAvailableOverlay,
         state,
         boardSize,
         dims);
         var board = A3($Graphics$Collage.collage,
         size,
         size,
         A2($Basics._op["++"],
         grid,
         A2($Basics._op["++"],
         pieces,
         A2($Basics._op["++"],
         overlay,
         outline))));
         return A2($Graphics$Input.clickable,
         A2($Signal.message,
         clickMailbox.address,
         $GameTypes.BoardClick),
         board);
      }();
   });
   var renderHand = F2(function (player,
   state) {
      return function () {
         var hiddenPiece = A3($Graphics$Element.image,
         $Display$Constants.handTileSize,
         $Display$Constants.handTileSize,
         "images/100/back2.png");
         var pieceSize = $Display$Constants.handTileSize + $Display$Constants.handPadding;
         var dummyHand = A2($List.repeat,
         5,
         A3($Graphics$Element.container,
         pieceSize,
         pieceSize,
         $Graphics$Element.middle)(hiddenPiece));
         var pieceImage = function (pieceStr) {
            return $Display$Helpers.pieceToImage($Piece.fromString(pieceStr));
         };
         var isPieceHeld = function (idx) {
            return _U.eq(state.turn,
            player) && _U.eq(state.heldPiece,
            $Maybe.Just(idx));
         };
         var makePiece = F2(function (idx,
         pieceStr) {
            return $Graphics$Input.clickable(A2($Signal.message,
            clickMailbox.address,
            A2($GameTypes.PieceInHand,
            player,
            idx)))($Graphics$Element.color(isPieceHeld(idx) ? $Player.toColor(state.turn) : $Color.white)(A3($Graphics$Element.container,
            pieceSize,
            pieceSize,
            $Graphics$Element.middle)(A3(pieceImage,
            pieceStr,
            $Basics.toString($Piece.baseValue($Piece.fromString(pieceStr))),
            $Basics.toFloat($Display$Constants.handTileSize)))));
         });
         var hand = A2($Player.getHand,
         player,
         state);
         var playerHand = $List.isEmpty(hand) && _U.eq(state.gameState,
         $GameTypes.Ongoing) ? _L.fromArray([A3($Graphics$Element.container,
         100,
         100,
         $Graphics$Element.middle)(A2($Graphics$Input.button,
         A2($Signal.message,
         clickMailbox.address,
         $GameTypes.PassButton),
         "Pass"))]) : A2($List.indexedMap,
         makePiece,
         hand);
         var cpuHand = A2($List.map,
         function (x) {
            return A3($Graphics$Element.container,
            pieceSize,
            pieceSize,
            $Graphics$Element.middle)(hiddenPiece);
         },
         hand);
         var p = $Player.toString(player);
         var playerType = A2($Maybe.withDefault,
         $GameTypes.Human,
         A2($Dict.get,p,state.players));
         var handContents = $State.isNotStarted(state) ? dummyHand : _U.eq(playerType,
         $GameTypes.Human) ? playerHand : cpuHand;
         return A2($Graphics$Element.flow,
         $Graphics$Element.right,
         handContents);
      }();
   });
   var renderMenu = $Display$Helpers.withMargin({ctor: "_Tuple2"
                                                ,_0: 95
                                                ,_1: 35})(A2($Graphics$Element.flow,
   $Graphics$Element.down,
   _L.fromArray([$Display$Helpers.withMargin({ctor: "_Tuple2"
                                             ,_0: 1
                                             ,_1: 3})(A4($Graphics$Input.customButton,
                A2($Signal.message,
                clickMailbox.address,
                $GameTypes.StartSinglePlayer),
                A3($Graphics$Element.image,
                208,
                48,
                "images/buttonSinglePlayer.png"),
                A3($Graphics$Element.image,
                208,
                48,
                "images/buttonSinglePlayer.png"),
                A3($Graphics$Element.image,
                208,
                48,
                "images/buttonSinglePlayer.png")))
                ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                             ,_0: 1
                                             ,_1: 3})(A4($Graphics$Input.customButton,
                A2($Signal.message,
                clickMailbox.address,
                $GameTypes.StartRemoteGameButton),
                A3($Graphics$Element.image,
                208,
                48,
                "images/button2PlayerOnline.png"),
                A3($Graphics$Element.image,
                208,
                48,
                "images/button2PlayerOnline.png"),
                A3($Graphics$Element.image,
                208,
                48,
                "images/button2PlayerOnline.png")))
                ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                             ,_0: 1
                                             ,_1: 3})(A4($Graphics$Input.customButton,
                A2($Signal.message,
                clickMailbox.address,
                $GameTypes.StartTwoPlayerHotseat),
                A3($Graphics$Element.image,
                208,
                48,
                "images/button2PlayerHotseat.png"),
                A3($Graphics$Element.image,
                208,
                48,
                "images/button2PlayerHotseat.png"),
                A3($Graphics$Element.image,
                208,
                48,
                "images/button2PlayerHotseat.png")))
                ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                             ,_0: 1
                                             ,_1: 3})(A3($Graphics$Element.image,
                208,
                48,
                "images/buttonViewRules.png"))])));
   var renderLog = function (state) {
      return A2($Graphics$Element.flow,
      $Graphics$Element.down,
      _L.fromArray([$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                ,_0: 10
                                                ,_1: 10})(A3($Graphics$Element.container,
                   380,
                   220,
                   $Graphics$Element.topLeft)($Graphics$Element.flow($Graphics$Element.down)($List.map(function (_v0) {
                      return function () {
                         switch (_v0.ctor)
                         {case "_Tuple2":
                            return $Graphics$Element.leftAligned($Text.color(_v0._0)($Text.fromString(_v0._1)));}
                         _U.badCase($moduleName,
                         "on line 189, column 56 to 106");
                      }();
                   })($List.take(5)(state.log)))))
                   ,_U.eq(state.gameState,
                   $GameTypes.GameOver) ? A3($Graphics$Element.container,
                   380,
                   40,
                   $Graphics$Element.middle)(A2($Graphics$Input.button,
                   A2($Signal.message,
                   clickMailbox.address,
                   $GameTypes.MainMenuButton),
                   "Main Menu")) : A2($Graphics$Element.spacer,
                   380,
                   40)]));
   };
   var renderRemoteSetupMenu = function (playerName) {
      return A2($Graphics$Element.flow,
      $Graphics$Element.down,
      _L.fromArray([A3($Graphics$Element.container,
                   300,
                   30,
                   $Graphics$Element.middle)($Graphics$Element.centered($Text.fromString("Enter your name")))
                   ,A4($Graphics$Input$Field.field,
                   $Graphics$Input$Field.defaultStyle,
                   $Signal.message(playerNameMailbox.address),
                   "Your name",
                   playerName)
                   ,A2($Graphics$Input.button,
                   A2($Signal.message,
                   clickMailbox.address,
                   $GameTypes.StartTwoPlayerOnline),
                   "Start")]));
   };
   var renderRightArea = F2(function (state,
   playerName) {
      return function () {
         var content = $State.isAtMainMenu(state) ? renderMenu : $State.isSettingUpRemoteGame(state) ? renderRemoteSetupMenu(playerName) : $State.isConnectingToRemoteGame(state) ? renderRemoteConnecting : function () {
            var _v4 = $State.pieceHeld(state);
            switch (_v4.ctor)
            {case "Just":
               return renderPieceDescription(_v4._0);
               case "Nothing":
               return renderLog(state);}
            _U.badCase($moduleName,
            "between lines 163 and 166");
         }();
         return A2($Display$Helpers.withBorder,
         {ctor: "_Tuple2",_0: 2,_1: 2},
         $Color.darkGrey)(A3($Graphics$Element.container,
         400,
         $Display$Constants.sidebarRightAreaHeight,
         $Graphics$Element.middle)(content));
      }();
   });
   var renderSidebar = F3(function (state,
   _v6,
   playerName) {
      return function () {
         switch (_v6.ctor)
         {case "_Tuple2":
            return function () {
                 var sidebarInnerPaddingHeight = ($Display$Board.getTotalBoardSize({ctor: "_Tuple2"
                                                                                   ,_0: _v6._0
                                                                                   ,_1: _v6._1}) - $Display$Constants.minSidebarHeight) / 2 | 0;
                 return A2($Graphics$Element.flow,
                 $Graphics$Element.down,
                 _L.fromArray([A3($Graphics$Element.image,
                              $Display$Constants.sidebarWidth,
                              $Display$Constants.sidebarImageHeight,
                              "images/100/kalevala.png")
                              ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                           ,_0: 12
                                                           ,_1: 11})(A2($Graphics$Element.flow,
                              $Graphics$Element.down,
                              _L.fromArray([A2(renderHand,
                                           $GameTypes.Red,
                                           state)
                                           ,A2($Graphics$Element.spacer,
                                           1,
                                           sidebarInnerPaddingHeight)
                                           ,A2($Graphics$Element.flow,
                                           $Graphics$Element.right,
                                           _L.fromArray([$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                                                     ,_0: 16
                                                                                     ,_1: 11})(renderScoreArea(state))
                                                        ,$Display$Helpers.withMargin({ctor: "_Tuple2"
                                                                                     ,_0: 13
                                                                                     ,_1: 19})(A2(renderRightArea,
                                                        state,
                                                        playerName))]))
                                           ,A2($Graphics$Element.spacer,
                                           1,
                                           sidebarInnerPaddingHeight)
                                           ,A2(renderHand,
                                           $GameTypes.Blue,
                                           state)])))]));
              }();}
         _U.badCase($moduleName,
         "between lines 67 and 78");
      }();
   });
   var renderGameArea = F3(function (state,
   dims,
   playerName) {
      return A2($Graphics$Element.flow,
      $Graphics$Element.right,
      _L.fromArray([A2(renderBoard,
                   state,
                   dims)
                   ,A2($Graphics$Element.spacer,
                   $Display$Constants.gameMargin,
                   1)
                   ,A3(renderSidebar,
                   state,
                   dims,
                   playerName)]));
   });
   var render = F3(function (state,
   dims,
   playerName) {
      return $Display$Helpers.withMargin({ctor: "_Tuple2"
                                         ,_0: $Display$Constants.gameMargin
                                         ,_1: $Display$Constants.gameMargin})(A3(renderGameArea,
      state,
      dims,
      playerName));
   });
   _elm.Display.values = {_op: _op
                         ,clickMailbox: clickMailbox
                         ,playerNameMailbox: playerNameMailbox
                         ,render: render
                         ,renderGameArea: renderGameArea
                         ,renderBoard: renderBoard
                         ,renderSidebar: renderSidebar
                         ,renderHand: renderHand
                         ,renderScoreArea: renderScoreArea
                         ,playerHandText: playerHandText
                         ,playerScoreText: playerScoreText
                         ,renderDeck: renderDeck
                         ,renderRightArea: renderRightArea
                         ,renderMenu: renderMenu
                         ,renderLog: renderLog
                         ,renderPieceDescription: renderPieceDescription
                         ,renderRemoteSetupMenu: renderRemoteSetupMenu
                         ,renderRemoteConnecting: renderRemoteConnecting};
   return _elm.Display.values;
};