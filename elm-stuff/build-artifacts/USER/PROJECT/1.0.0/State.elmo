Elm.State = Elm.State || {};
Elm.State.make = function (_elm) {
   "use strict";
   _elm.State = _elm.State || {};
   if (_elm.State.values)
   return _elm.State.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "State",
   $Basics = Elm.Basics.make(_elm),
   $GameTypes = Elm.GameTypes.make(_elm),
   $Helpers = Elm.Helpers.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Piece = Elm.Piece.make(_elm),
   $Player = Elm.Player.make(_elm);
   var pieceHeld = function (state) {
      return function () {
         var _v0 = state.heldPiece;
         switch (_v0.ctor)
         {case "Just":
            return function () {
                 var hand = A2($Player.getHand,
                 state.turn,
                 state);
                 var pieceStr = A2($Helpers._op["!!"],
                 hand,
                 _v0._0);
                 return $Maybe.Just($Piece.fromString(pieceStr));
              }();
            case "Nothing":
            return $Maybe.Nothing;}
         _U.badCase($moduleName,
         "between lines 52 and 58");
      }();
   };
   var isConnectingToRemoteGame = function (state) {
      return _U.eq(state.gameState,
      $GameTypes.WaitingForPlayers);
   };
   var isSettingUpRemoteGame = function (state) {
      return _U.eq(state.gameState,
      $GameTypes.NotStarted) && _U.eq(state.gameType,
      $GameTypes.HumanVsHumanRemote);
   };
   var isAtMainMenu = function (state) {
      return _U.eq(state.gameState,
      $GameTypes.NotStarted) && !_U.eq(state.gameType,
      $GameTypes.HumanVsHumanRemote);
   };
   var isNotStarted = function (state) {
      return function () {
         var _v2 = state.gameState;
         switch (_v2.ctor)
         {case "NotStarted": return true;
            case "WaitingForPlayers":
            return true;}
         return false;
      }();
   };
   var isOngoing = function (state) {
      return function () {
         var _v3 = state.gameState;
         switch (_v3.ctor)
         {case "Connected": return true;
            case "Ongoing": return true;}
         return false;
      }();
   };
   var isGameOver = function (state) {
      return isOngoing(state) && (A2($Player.noTilesInHand,
      $GameTypes.Red,
      state) && A2($Player.noTilesInHand,
      $GameTypes.Blue,
      state));
   };
   var mustPass = function (state) {
      return isOngoing(state) && A2($Player.noTilesInHand,
      state.turn,
      state);
   };
   var isPlayerTurn = function (state) {
      return isOngoing(state) && _U.eq(A2($Player.getType,
      state.turn,
      state),
      $GameTypes.Human);
   };
   _elm.State.values = {_op: _op
                       ,isOngoing: isOngoing
                       ,isNotStarted: isNotStarted
                       ,isAtMainMenu: isAtMainMenu
                       ,isSettingUpRemoteGame: isSettingUpRemoteGame
                       ,isConnectingToRemoteGame: isConnectingToRemoteGame
                       ,isGameOver: isGameOver
                       ,mustPass: mustPass
                       ,isPlayerTurn: isPlayerTurn
                       ,pieceHeld: pieceHeld};
   return _elm.State.values;
};