Elm.Player = Elm.Player || {};
Elm.Player.make = function (_elm) {
   "use strict";
   _elm.Player = _elm.Player || {};
   if (_elm.Player.values)
   return _elm.Player.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Player",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $GameTypes = Elm.GameTypes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Random = Elm.Random.make(_elm);
   var random = function (seed) {
      return _U.cmp($Basics.fst(A2($Random.generate,
      A2($Random.$float,0,1),
      seed)),
      0.5) > 0 ? $GameTypes.Red : $GameTypes.Blue;
   };
   var next = function (player) {
      return function () {
         switch (player.ctor)
         {case "Blue":
            return $GameTypes.Red;
            case "Red":
            return $GameTypes.Blue;}
         _U.badCase($moduleName,
         "between lines 33 and 35");
      }();
   };
   var toString = function (player) {
      return function () {
         switch (player.ctor)
         {case "Blue": return "blue";
            case "Red": return "red";}
         _U.badCase($moduleName,
         "between lines 27 and 29");
      }();
   };
   var getType = F2(function (player,
   state) {
      return A2($Maybe.withDefault,
      $GameTypes.Human,
      A2($Dict.get,
      toString(player),
      state.players));
   });
   var getHand = F2(function (player,
   state) {
      return A2($Maybe.withDefault,
      _L.fromArray([]),
      A2($Dict.get,
      toString(player),
      state.hands));
   });
   var noTilesInHand = F2(function (player,
   state) {
      return $List.isEmpty(A2(getHand,
      player,
      state));
   });
   var fromString = function (str) {
      return function () {
         switch (str)
         {case "blue":
            return $GameTypes.Blue;
            case "red":
            return $GameTypes.Red;}
         _U.badCase($moduleName,
         "between lines 21 and 23");
      }();
   };
   var toColor = function (player) {
      return function () {
         switch (player.ctor)
         {case "Blue":
            return $Color.blue;
            case "Red": return $Color.red;}
         _U.badCase($moduleName,
         "between lines 15 and 17");
      }();
   };
   _elm.Player.values = {_op: _op
                        ,toColor: toColor
                        ,fromString: fromString
                        ,toString: toString
                        ,next: next
                        ,getType: getType
                        ,getHand: getHand
                        ,noTilesInHand: noTilesInHand
                        ,random: random};
   return _elm.Player.values;
};