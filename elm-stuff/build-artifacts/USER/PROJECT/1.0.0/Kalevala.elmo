Elm.Kalevala = Elm.Kalevala || {};
Elm.Kalevala.make = function (_elm) {
   "use strict";
   _elm.Kalevala = _elm.Kalevala || {};
   if (_elm.Kalevala.values)
   return _elm.Kalevala.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Kalevala",
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Deprecated$WebSocket = Elm.Deprecated.WebSocket.make(_elm),
   $Deserialize = Elm.Deserialize.make(_elm),
   $Display = Elm.Display.make(_elm),
   $Display$Board = Elm.Display.Board.make(_elm),
   $Game = Elm.Game.make(_elm),
   $GameTypes = Elm.GameTypes.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Graphics$Input$Field = Elm.Graphics.Input.Field.make(_elm),
   $Helpers = Elm.Helpers.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $Json$Encode = Elm.Json.Encode.make(_elm),
   $Log = Elm.Log.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Mouse = Elm.Mouse.make(_elm),
   $Player = Elm.Player.make(_elm),
   $Random = Elm.Random.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Serialize = Elm.Serialize.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $State = Elm.State.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var getCpuResponse = F2(function (playerAction,
   delayTime) {
      return function () {
         var processCpuResponse = function (a) {
            return function () {
               switch (a.ctor)
               {case "Pass":
                  return $GameTypes.CpuAction;
                  case "PlacePiece":
                  return $GameTypes.CpuAction;}
               return $GameTypes.NoAction;
            }();
         };
         return A2($Time.delay,
         delayTime,
         A2($Signal._op["<~"],
         processCpuResponse,
         playerAction));
      }();
   });
   var decode = function (actionJson) {
      return function () {
         var _v3 = A2($Json$Decode.decodeString,
         $Deserialize.action,
         actionJson);
         switch (_v3.ctor)
         {case "Err":
            return $GameTypes.ParseError(_v3._0);
            case "Ok": return _v3._0;}
         _U.badCase($moduleName,
         "between lines 103 and 105");
      }();
   };
   var encode = function (action) {
      return A2($Json$Encode.encode,
      0,
      $Serialize.action(action));
   };
   var server = "ws://ec2-52-10-22-64.us-west-2.compute.amazonaws.com:22000";
   var constructAction = F5(function (clickType,
   seed,
   mousePos,
   dims,
   playerName) {
      return function () {
         var deck = A2($Helpers.shuffle,
         $Game.deckContents,
         seed);
         var click = A2($Debug.watch,
         "clickInput.signal",
         clickType);
         var pos = A2($Debug.watch,
         "Mouse.position",
         mousePos);
         return function () {
            switch (clickType.ctor)
            {case "BoardClick":
               return A2($GameTypes.PlacePiece,
                 mousePos,
                 dims);
               case "MainMenuButton":
               return $GameTypes.MoveToMainMenu;
               case "None":
               return $GameTypes.NoAction;
               case "PassButton":
               return $GameTypes.Pass;
               case "PieceInHand":
               return A2($GameTypes.PickUpPiece,
                 clickType._0,
                 clickType._1);
               case "StartRemoteGameButton":
               return $GameTypes.MoveToRemoteGameMenu;
               case "StartSinglePlayer":
               return A4($GameTypes.StartGame,
                 $GameTypes.HumanVsCpu,
                 deck,
                 $Player.random(seed),
                 playerName.string);
               case "StartTwoPlayerHotseat":
               return A4($GameTypes.StartGame,
                 $GameTypes.HumanVsHumanLocal,
                 deck,
                 $Player.random(seed),
                 playerName.string);
               case "StartTwoPlayerOnline":
               return A4($GameTypes.StartGame,
                 $GameTypes.HumanVsHumanRemote,
                 deck,
                 $Player.random(seed),
                 playerName.string);}
            _U.badCase($moduleName,
            "between lines 71 and 82");
         }();
      }();
   });
   var processClick = function (signal) {
      return function () {
         var sampledPlayerName = $Signal.sampleOn(signal)($Display.playerNameMailbox.signal);
         var sampledMouse = A2($Signal.sampleOn,
         signal,
         $Mouse.position);
         var seedSignal = A2($Signal._op["<~"],
         function ($) {
            return $Random.initialSeed($Basics.round($Basics.fst($)));
         },
         $Time.timestamp(signal));
         return A2($Signal._op["~"],
         A2($Signal._op["~"],
         A2($Signal._op["~"],
         A2($Signal._op["~"],
         A2($Signal._op["<~"],
         constructAction,
         signal),
         seedSignal),
         sampledMouse),
         $Window.dimensions),
         sampledPlayerName);
      }();
   };
   var performAction = F2(function (action,
   state) {
      return function () {
         var newState = function () {
            switch (action.ctor)
            {case "CpuAction":
               return $Game.tryAIMove(state);
               case "GameStarted":
               return A5($Game.gameStarted,
                 action._0,
                 action._1,
                 action._2,
                 action._3,
                 state);
               case "MoveToMainMenu":
               return $Game.startState;
               case "MoveToRemoteGameMenu":
               return _U.replace([["gameType"
                                  ,$GameTypes.HumanVsHumanRemote]
                                 ,["gameState"
                                  ,$GameTypes.NotStarted]],
                 state);
               case "NoAction": return state;
               case "OpponentDisconnected":
               return _U.replace([["gameState"
                                  ,$GameTypes.Disconnected]],
                 state);
               case "ParseError": return state;
               case "Pass":
               return _U.replace([["turn"
                                  ,$Player.next(state.turn)]],
                 state);
               case "PickUpPiece":
               return A3($Game.tryToPickUpPiece,
                 action._0,
                 action._1,
                 state);
               case "PlacePiece":
               return A2($Game.tryMove,
                 A3($Display$Board.mouseToBoardPosition,
                 action._0,
                 state,
                 action._1),
                 state);
               case "StartGame":
               return A4($Game.startGame,
                 action._0,
                 action._1,
                 action._2,
                 action._3);}
            _U.badCase($moduleName,
            "between lines 45 and 57");
         }();
         return $State.isGameOver(newState) ? _U.replace([["gameState"
                                                          ,$GameTypes.GameOver]
                                                         ,["log"
                                                          ,A2($Log.addSystemMsg,
                                                          "Game over!",
                                                          newState.log)]],
         newState) : $State.mustPass(newState) ? $Game.pass(newState) : newState;
      }();
   });
   var isRemoteSignal = function () {
      var getIsRemoteFromClickSignal = function (event) {
         return function () {
            switch (event.ctor)
            {case "StartSinglePlayer":
               return $Maybe.Just(false);
               case "StartTwoPlayerHotseat":
               return $Maybe.Just(false);
               case "StartTwoPlayerOnline":
               return $Maybe.Just(true);}
            return $Maybe.Nothing;
         }();
      };
      return A3($Signal.filterMap,
      getIsRemoteFromClickSignal,
      false,
      $Display.clickMailbox.signal);
   }();
   var getRemoteResponse = function (playerAction) {
      return function () {
         var actionForRemote = A3($Helpers.filterOn,
         playerAction,
         isRemoteSignal,
         $GameTypes.NoAction);
         var request = A2($Signal._op["<~"],
         $Debug.watch("request"),
         A2($Signal._op["<~"],
         encode,
         actionForRemote));
         var response = A2($Signal._op["<~"],
         $Debug.watch("response"),
         A2($Deprecated$WebSocket.connect,
         server,
         request));
         return A2($Signal._op["<~"],
         $Debug.watch("deserialized"),
         A2($Signal._op["<~"],
         decode,
         response));
      }();
   };
   var main = function () {
      var playerAction = processClick($Display.clickMailbox.signal);
      var remoteAction = getRemoteResponse(playerAction);
      var cpuAction = A2(getCpuResponse,
      playerAction,
      $Time.second);
      var state = A3($Signal.foldp,
      performAction,
      $Game.startState,
      $Signal.mergeMany(_L.fromArray([playerAction
                                     ,remoteAction
                                     ,cpuAction])));
      return A2($Signal._op["~"],
      A2($Signal._op["~"],
      A2($Signal._op["<~"],
      $Display.render,
      state),
      $Window.dimensions),
      $Display.playerNameMailbox.signal);
   }();
   _elm.Kalevala.values = {_op: _op
                          ,isRemoteSignal: isRemoteSignal
                          ,performAction: performAction
                          ,constructAction: constructAction
                          ,processClick: processClick
                          ,server: server
                          ,encode: encode
                          ,decode: decode
                          ,getRemoteResponse: getRemoteResponse
                          ,getCpuResponse: getCpuResponse
                          ,main: main};
   return _elm.Kalevala.values;
};