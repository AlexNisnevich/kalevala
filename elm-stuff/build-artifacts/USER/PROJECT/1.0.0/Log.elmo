Elm.Log = Elm.Log || {};
Elm.Log.make = function (_elm) {
   "use strict";
   _elm.Log = _elm.Log || {};
   if (_elm.Log.values)
   return _elm.Log.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Log",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Decorate = Elm.Decorate.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Text = Elm.Text.make(_elm);
   var display = F2(function (_v0,
   log) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return function () {
                 var fullLog = $Graphics$Element.flow($Graphics$Element.down)($List.map(function (_v4) {
                    return function () {
                       switch (_v4.ctor)
                       {case "_Tuple2":
                          return $Graphics$Element.width(_v0._0)($Graphics$Element.leftAligned($Text.color(_v4._0)($Text.fromString(_v4._1))));}
                       _U.badCase($moduleName,
                       "on line 23, column 40 to 94");
                    }();
                 })(log));
                 return _U.cmp($Graphics$Element.heightOf(fullLog),
                 _v0._1) > 0 ? $Decorate.decorate({ctor: "_Tuple2"
                                                  ,_0: "style"
                                                  ,_1: "overflow-y: scroll; overflow-x: hidden;"})($Graphics$Element.height(_v0._1)(fullLog)) : fullLog;
              }();}
         _U.badCase($moduleName,
         "between lines 23 and 29");
      }();
   });
   var add = F3(function (str,
   color,
   log) {
      return A2($List._op["::"],
      {ctor: "_Tuple2"
      ,_0: color
      ,_1: str},
      log);
   });
   var singleton = F2(function (str,
   color) {
      return _L.fromArray([{ctor: "_Tuple2"
                           ,_0: color
                           ,_1: str}]);
   });
   var empty = _L.fromArray([]);
   _elm.Log.values = {_op: _op
                     ,empty: empty
                     ,singleton: singleton
                     ,add: add
                     ,display: display};
   return _elm.Log.values;
};