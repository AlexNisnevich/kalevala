Elm.Piece = Elm.Piece || {};
Elm.Piece.make = function (_elm) {
   "use strict";
   _elm.Piece = _elm.Piece || {};
   if (_elm.Piece.values)
   return _elm.Piece.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Piece",
   $Basics = Elm.Basics.make(_elm),
   $GameTypes = Elm.GameTypes.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var rulesText = function (piece) {
      return function () {
         switch (piece.ctor)
         {case "Joukahainen":
            return "4 - Value is the sum of all Joukahainen tiles in the same row or column.";
            case "Kaarme":
            return "5 - May be placed on top of other tiles (except other K&auml;&auml;rmes).";
            case "Kullervo":
            return "6 - Only other Kullervos may be placed next to this tile.";
            case "Lemminkainen":
            return "1 - All adjacent tiles (except other Lemmink&auml;inens) have value 0.";
            case "Louhi":
            return "2 - Automatically scores when there are Louhis on both ends of a line.";
            case "SeppoIlmarinen":
            return "3 - You may exchange it with any tile on the table (except other Seppo Ilmarinens).";
            case "Ukko":
            return "7 - No special rules.";
            case "Vainamoinen":
            return "8 - No special rules.";}
         _U.badCase($moduleName,
         "between lines 67 and 75");
      }();
   };
   var flavorText = function (piece) {
      return function () {
         switch (piece.ctor)
         {case "Joukahainen":
            return "After losing a contest, the arrogant archer Joukahainen pledged his sister Aino to V&auml;in&auml;m&ouml;inen, but she drowned herself rather than marry him.";
            case "Kaarme":
            return "Plowing a field of poisonous snakes (k&auml;&auml;rmeit&auml;) was the first task that Seppo Ilmarinen had to perform to marry Louhi\'s daughter.";
            case "Kullervo":
            return "Kullervo grew up thinking his family was dead, amongst his people\'s murderers, and killed himself after unknowingly seducing his sister.";
            case "Lemminkainen":
            return "After Lemmink&auml;inen drowned in the underworld, his mother sewed his body together and restored him to life with ointment from Ukko\'s halls.";
            case "Louhi":
            return "Louhi was a powerful witch with the ability to change shape, and the main opponent of V&auml;in&auml;m&ouml;inen in the battle for the magical artifact Sampo.";
            case "SeppoIlmarinen":
            return "Seppo Ilmarinen, the Eternal Hammerer, was an immortal blacksmith who was capable of creating practically anything, but unlucky in love.";
            case "Ukko":
            return "Ukko, the god of the sky, created lightning with his hammer Ukonvasara and caused thunderstorms by driving his chariot through the skies.";
            case "Vainamoinen":
            return "V&auml;in&auml;m&ouml;inen, the central character of the Kalevala, was a shamanistic hero with a magical power of song and music.";}
         _U.badCase($moduleName,
         "between lines 55 and 63");
      }();
   };
   var baseValue = function (piece) {
      return function () {
         switch (piece.ctor)
         {case "Joukahainen": return 4;
            case "Kaarme": return 5;
            case "Kullervo": return 6;
            case "Lemminkainen": return 1;
            case "Louhi": return 2;
            case "SeppoIlmarinen": return 3;
            case "Ukko": return 7;
            case "Vainamoinen": return 8;}
         _U.badCase($moduleName,
         "between lines 43 and 51");
      }();
   };
   var toDisplayString = function (piece) {
      return function () {
         switch (piece.ctor)
         {case "Joukahainen":
            return "Joukahainen";
            case "Kaarme":
            return "K&auml;&auml;rme";
            case "Kullervo":
            return "Kullervo";
            case "Lemminkainen":
            return "Lemmink&auml;inen";
            case "Louhi": return "Louhi";
            case "SeppoIlmarinen":
            return "Seppo Ilmarinen";
            case "Ukko": return "Ukko";
            case "Vainamoinen":
            return "V&auml;in&auml;m&ouml;inen";}
         _U.badCase($moduleName,
         "between lines 31 and 39");
      }();
   };
   var toString = function (piece) {
      return function () {
         switch (piece.ctor)
         {case "Joukahainen":
            return "Jouk";
            case "Kaarme": return "Kaarme";
            case "Kullervo":
            return "Kullervo";
            case "Lemminkainen":
            return "Lemmi";
            case "Louhi": return "Louhi";
            case "SeppoIlmarinen":
            return "Ilmar";
            case "Ukko": return "Ukko";
            case "Vainamoinen":
            return "Vain";}
         _U.badCase($moduleName,
         "between lines 19 and 27");
      }();
   };
   var fromString = function (str) {
      return function () {
         switch (str)
         {case "Ilmar":
            return $GameTypes.SeppoIlmarinen;
            case "Jouk":
            return $GameTypes.Joukahainen;
            case "Kaarme":
            return $GameTypes.Kaarme;
            case "Kullervo":
            return $GameTypes.Kullervo;
            case "Lemmi":
            return $GameTypes.Lemminkainen;
            case "Louhi":
            return $GameTypes.Louhi;
            case "Ukko":
            return $GameTypes.Ukko;
            case "Vain":
            return $GameTypes.Vainamoinen;}
         _U.badCase($moduleName,
         "between lines 7 and 15");
      }();
   };
   _elm.Piece.values = {_op: _op
                       ,fromString: fromString
                       ,toString: toString
                       ,toDisplayString: toDisplayString
                       ,baseValue: baseValue
                       ,flavorText: flavorText
                       ,rulesText: rulesText};
   return _elm.Piece.values;
};