Elm.Game = Elm.Game || {};
Elm.Game.make = function (_elm) {
   "use strict";
   _elm.Game = _elm.Game || {};
   if (_elm.Game.values)
   return _elm.Game.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Game",
   $AI = Elm.AI.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Board = Elm.Board.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $GameTypes = Elm.GameTypes.make(_elm),
   $Helpers = Elm.Helpers.make(_elm),
   $List = Elm.List.make(_elm),
   $Log = Elm.Log.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Piece = Elm.Piece.make(_elm),
   $Player = Elm.Player.make(_elm),
   $State = Elm.State.make(_elm);
   var startState = {_: {}
                    ,board: $Dict.empty
                    ,deck: _L.fromArray([])
                    ,gameState: $GameTypes.NotStarted
                    ,gameType: $GameTypes.HumanVsCpu
                    ,hands: $Dict.fromList(_L.fromArray([{ctor: "_Tuple2"
                                                         ,_0: "Red"
                                                         ,_1: _L.fromArray([])}
                                                        ,{ctor: "_Tuple2"
                                                         ,_0: "Blue"
                                                         ,_1: _L.fromArray([])}]))
                    ,heldPiece: $Maybe.Nothing
                    ,lastPlaced: $Maybe.Nothing
                    ,lastPlacedPlayer: $Maybe.Nothing
                    ,log: $Log.empty
                    ,playerNames: $Dict.fromList(_L.fromArray([{ctor: "_Tuple2"
                                                               ,_0: "Red"
                                                               ,_1: "Player"}
                                                              ,{ctor: "_Tuple2"
                                                               ,_0: "Blue"
                                                               ,_1: "CPU"}]))
                    ,players: $Dict.fromList(_L.fromArray([{ctor: "_Tuple2"
                                                           ,_0: "Red"
                                                           ,_1: $GameTypes.Human}
                                                          ,{ctor: "_Tuple2"
                                                           ,_0: "Blue"
                                                           ,_1: $GameTypes.Cpu}]))
                    ,score: $Dict.fromList(_L.fromArray([{ctor: "_Tuple2"
                                                         ,_0: "Red"
                                                         ,_1: 0}
                                                        ,{ctor: "_Tuple2"
                                                         ,_0: "Blue"
                                                         ,_1: 0}]))
                    ,turn: $GameTypes.Red};
   var deckContents = function () {
      var r = $List.repeat;
      return A2($Basics._op["++"],
      A2(r,6,"Vain"),
      A2($Basics._op["++"],
      A2(r,8,"Ukko"),
      A2($Basics._op["++"],
      A2(r,6,"Kullervo"),
      A2($Basics._op["++"],
      A2(r,8,"Kaarme"),
      A2($Basics._op["++"],
      A2(r,8,"Jouk"),
      A2($Basics._op["++"],
      A2(r,9,"Ilmar"),
      A2($Basics._op["++"],
      A2(r,9,"Louhi"),
      A2(r,6,"Lemmi"))))))));
   }();
   var getFirstTileHandsAndDeck = function (deck) {
      return function () {
         var deckWithIndices = A3($List.map2,
         F2(function (v0,v1) {
            return {ctor: "_Tuple2"
                   ,_0: v0
                   ,_1: v1};
         }),
         _L.range(0,
         $List.length(deck) - 1),
         deck);
         var $ = $Helpers.headU(A2($List.filter,
         function (_v0) {
            return function () {
               switch (_v0.ctor)
               {case "_Tuple2":
                  return $Basics.not(_U.eq(_v0._1,
                    "Kullervo"));}
               _U.badCase($moduleName,
               "on line 106, column 88 to 112");
            }();
         },
         deckWithIndices)),
         idxFirstNonKullervo = $._0,
         pieceFirstNonKullervo = $._1;
         var firstTile = $Piece.fromString(pieceFirstNonKullervo);
         var deckMinusFirstTile = A2($Helpers.without,
         idxFirstNonKullervo,
         deck);
         var redHand = A2($List.take,
         5,
         deckMinusFirstTile);
         var blueHand = A2($List.take,
         5,
         A2($List.drop,
         5,
         deckMinusFirstTile));
         var hands = $Dict.fromList(_L.fromArray([{ctor: "_Tuple2"
                                                  ,_0: "Red"
                                                  ,_1: redHand}
                                                 ,{ctor: "_Tuple2"
                                                  ,_0: "Blue"
                                                  ,_1: blueHand}]));
         var remainder = A2($List.drop,
         10,
         deckMinusFirstTile);
         return {ctor: "_Tuple3"
                ,_0: firstTile
                ,_1: hands
                ,_2: remainder};
      }();
   };
   var gameStarted = F5(function (deck,
   startPlayer,
   localPlayer,
   opponentName,
   state) {
      return function () {
         var $ = getFirstTileHandsAndDeck(deck),
         firstTile = $._0,
         hands = $._1,
         remainder = $._2;
         var playerNames = $Dict.fromList(_L.fromArray([{ctor: "_Tuple2"
                                                        ,_0: $Player.toString(localPlayer)
                                                        ,_1: "You"}
                                                       ,{ctor: "_Tuple2"
                                                        ,_0: $Player.toString($Player.next(localPlayer))
                                                        ,_1: opponentName}]));
         var players = $Dict.fromList(_L.fromArray([{ctor: "_Tuple2"
                                                    ,_0: "Red"
                                                    ,_1: _U.eq(localPlayer,
                                                    $GameTypes.Red) ? $GameTypes.Human : $GameTypes.Remote}
                                                   ,{ctor: "_Tuple2"
                                                    ,_0: "Blue"
                                                    ,_1: _U.eq(localPlayer,
                                                    $GameTypes.Blue) ? $GameTypes.Human : $GameTypes.Remote}]));
         return _U.replace([["gameType"
                            ,$GameTypes.HumanVsHumanRemote]
                           ,["gameState"
                            ,$GameTypes.Connected(opponentName)]
                           ,["players",players]
                           ,["playerNames",playerNames]
                           ,["hands",hands]
                           ,["deck",remainder]
                           ,["board"
                            ,A2($Dict.singleton,
                            {ctor: "_Tuple2",_0: 0,_1: 0},
                            firstTile)]
                           ,["turn",startPlayer]
                           ,["log"
                            ,$Log.addSystemMsg("Game started.")($Log.addSystemMsg(A2($Basics._op["++"],
                            opponentName,
                            " joined the game."))(state.log))]],
         startState);
      }();
   });
   var makeMove = F2(function (move,
   state) {
      return function () {
         var leadChangeText = A2($Basics._op["++"],
         A2($Helpers.getU,
         $Player.toString(state.turn),
         state.playerNames),
         " took the lead!");
         var existingTile = A2($Dict.get,
         move.location,
         state.board);
         var hand = A2($Player.getHand,
         state.turn,
         state);
         var handWithDrawnTile = A2($Basics._op["++"],
         A2($Helpers.without,
         move.idx,
         hand),
         $Basics.not($List.isEmpty(state.deck)) ? A2($List.take,
         1,
         state.deck) : _L.fromArray([]));
         var newHand = function () {
            switch (existingTile.ctor)
            {case "Just":
               return _U.eq(move.piece,
                 $GameTypes.SeppoIlmarinen) ? A3($Helpers.replaceAtIndex,
                 move.idx,
                 $Piece.toString(existingTile._0),
                 hand) : handWithDrawnTile;
               case "Nothing":
               return handWithDrawnTile;}
            _U.badCase($moduleName,
            "between lines 79 and 83");
         }();
         var newBoard = A3($Dict.insert,
         move.location,
         move.piece,
         state.board);
         var delta = A2($Board.scoreMove,
         move,
         newBoard);
         var p = $Player.toString(state.turn);
         var newScore = $Maybe.withDefault(0)(A2($Dict.get,
         p,
         state.score)) + delta;
         var logText = A2($Basics._op["++"],
         A2($Helpers.getU,
         $Player.toString(state.turn),
         state.playerNames),
         A2($Basics._op["++"],
         " placed ",
         A2($Basics._op["++"],
         $Piece.toDisplayString(move.piece),
         A2($Basics._op["++"],
         " for ",
         A2($Basics._op["++"],
         $Basics.toString(delta),
         A2($Basics._op["++"],
         " points",
         A2($Basics._op["++"],
         " (total : ",
         A2($Basics._op["++"],
         $Basics.toString(newScore),
         ")"))))))));
         var newScores = A3($Dict.insert,
         p,
         newScore,
         state.score);
         var newLog = _U.eq($State.leadingPlayer(_U.replace([["score"
                                                             ,newScores]],
         state)),
         $Maybe.Just(state.turn)) && !_U.eq($State.leadingPlayer(state),
         $Maybe.Just(state.turn)) ? A2($Log.addPlayerMsg,
         leadChangeText,
         state.turn)(A2($Log.addPlayerMsg,
         logText,
         state.turn)(state.log)) : A2($Log.addPlayerMsg,
         logText,
         state.turn)(state.log);
         return _U.replace([["turn"
                            ,$State.nextPlayer(state)]
                           ,["board",newBoard]
                           ,["score",newScores]
                           ,["deck"
                            ,A2($List.drop,1,state.deck)]
                           ,["hands"
                            ,A3($Dict.insert,
                            p,
                            newHand,
                            state.hands)]
                           ,["heldPiece",$Maybe.Nothing]
                           ,["lastPlaced"
                            ,$Maybe.Just(move.location)]
                           ,["lastPlacedPlayer"
                            ,$Maybe.Just(state.turn)]
                           ,["log",newLog]],
         state);
      }();
   });
   var tryMove = F2(function (location,
   state) {
      return function () {
         var _v6 = state.heldPiece;
         switch (_v6.ctor)
         {case "Just":
            return function () {
                 var nextPlayerType = A2($Player.getType,
                 $State.nextPlayer(state),
                 state);
                 var hand = A2($Player.getHand,
                 state.turn,
                 state);
                 var pieceStr = A2($Helpers._op["!!"],
                 hand,
                 _v6._0);
                 var piece = $Piece.fromString(pieceStr);
                 var move = {_: {}
                            ,idx: _v6._0
                            ,location: location
                            ,piece: piece};
                 return A2($Board.isValidMove,
                 move,
                 state.board) ? A2(makeMove,
                 move,
                 state) : _U.replace([["heldPiece"
                                      ,$Maybe.Nothing]],
                 state);
              }();
            case "Nothing": return state;}
         _U.badCase($moduleName,
         "between lines 42 and 58");
      }();
   });
   var pass = function (state) {
      return function () {
         var logMsg = A2($Basics._op["++"],
         $Maybe.withDefault("")(A2($Dict.get,
         $Player.toString(state.turn),
         state.playerNames)),
         " passed.");
         return _U.replace([["turn"
                            ,$State.nextPlayer(state)]
                           ,["log"
                            ,A3($Log.addPlayerMsg,
                            logMsg,
                            state.turn,
                            state.log)]],
         state);
      }();
   };
   var tryAIMove = function (state) {
      return $State.isOngoing(state) && _U.eq(A2($Player.getType,
      state.turn,
      state),
      $GameTypes.Cpu) ? function () {
         var _v8 = $AI.getMove(state);
         switch (_v8.ctor)
         {case "Just": return A2(tryMove,
              _v8._0.location,
              _U.replace([["heldPiece"
                          ,$Maybe.Just(_v8._0.idx)]],
              state));
            case "Nothing":
            return pass(state);}
         _U.badCase($moduleName,
         "between lines 63 and 66");
      }() : state;
   };
   var startGame = F4(function (gameType,
   deck,
   player,
   playerName) {
      return function () {
         var $ = getFirstTileHandsAndDeck(deck),
         firstTile = $._0,
         hands = $._1,
         remainder = $._2;
         var playerNames = $Dict.fromList(_L.fromArray([{ctor: "_Tuple2"
                                                        ,_0: $Player.toString(player)
                                                        ,_1: _U.eq(gameType,
                                                        $GameTypes.HumanVsCpu) ? "You" : $Player.toString(player)}
                                                       ,{ctor: "_Tuple2"
                                                        ,_0: $Player.toString($Player.next(player))
                                                        ,_1: _U.eq(gameType,
                                                        $GameTypes.HumanVsCpu) ? "CPU" : $Player.toString($Player.next(player))}]));
         var players = $Dict.fromList(_L.fromArray([{ctor: "_Tuple2"
                                                    ,_0: $Player.toString(player)
                                                    ,_1: $GameTypes.Human}
                                                   ,{ctor: "_Tuple2"
                                                    ,_0: $Player.toString($Player.next(player))
                                                    ,_1: function () {
                                                       switch (gameType.ctor)
                                                       {case "HumanVsCpu":
                                                          return $GameTypes.Cpu;
                                                          case "HumanVsHumanLocal":
                                                          return $GameTypes.Human;
                                                          case "HumanVsHumanRemote":
                                                          return $GameTypes.Remote;}
                                                       _U.badCase($moduleName,
                                                       "between lines 124 and 127");
                                                    }()}]));
         var state = _U.eq(gameType,
         $GameTypes.HumanVsHumanRemote) ? _U.replace([["gameType"
                                                      ,gameType]
                                                     ,["gameState"
                                                      ,$GameTypes.WaitingForPlayers]
                                                     ,["players",players]
                                                     ,["playerNames"
                                                      ,playerNames]
                                                     ,["turn",player]
                                                     ,["log"
                                                      ,$Log.addSystemMsg("Waiting for opponent . . .")($Log.addSystemMsg(A2($Basics._op["++"],
                                                      playerName,
                                                      " joined the game."))($Log.empty))]],
         startState) : _U.replace([["gameType"
                                   ,gameType]
                                  ,["gameState"
                                   ,$GameTypes.Ongoing]
                                  ,["players",players]
                                  ,["playerNames",playerNames]
                                  ,["hands",hands]
                                  ,["deck",remainder]
                                  ,["board"
                                   ,A2($Dict.singleton,
                                   {ctor: "_Tuple2",_0: 0,_1: 0},
                                   firstTile)]
                                  ,["turn",player]
                                  ,["log"
                                   ,A2($Log.singleton,
                                   "Game started.",
                                   $Color.darkGrey)]],
         startState);
         return _U.eq(A2($Player.getType,
         state.turn,
         state),
         $GameTypes.Cpu) ? tryAIMove(state) : state;
      }();
   });
   var tryToPickUpPiece = F3(function (player,
   idx,
   state) {
      return _U.eq(state.turn,
      player) && $State.isOngoing(state) ? _U.eq(state.heldPiece,
      $Maybe.Just(idx)) ? _U.replace([["heldPiece"
                                      ,$Maybe.Nothing]],
      state) : _U.replace([["heldPiece"
                           ,$Maybe.Just(idx)]],
      state) : state;
   });
   _elm.Game.values = {_op: _op
                      ,tryToPickUpPiece: tryToPickUpPiece
                      ,pass: pass
                      ,tryMove: tryMove
                      ,tryAIMove: tryAIMove
                      ,makeMove: makeMove
                      ,getFirstTileHandsAndDeck: getFirstTileHandsAndDeck
                      ,startGame: startGame
                      ,gameStarted: gameStarted
                      ,deckContents: deckContents
                      ,startState: startState};
   return _elm.Game.values;
};