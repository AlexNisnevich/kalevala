Elm.Display = Elm.Display || {};
Elm.Display.make = function (_elm) {
   "use strict";
   _elm.Display = _elm.Display || {};
   if (_elm.Display.values)
   return _elm.Display.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _A = _N.Array.make(_elm),
   _E = _N.Error.make(_elm),
   $moduleName = "Display",
   $Basics = Elm.Basics.make(_elm),
   $Board = Elm.Board.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Dict = Elm.Dict.make(_elm),
   $GameTypes = Elm.GameTypes.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Graphics$Input = Elm.Graphics.Input.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Piece = Elm.Piece.make(_elm),
   $Player = Elm.Player.make(_elm),
   $String = Elm.String.make(_elm),
   $Text = Elm.Text.make(_elm);
   var drawLastPlacedOutline = F2(function (state,
   tileSize) {
      return function () {
         var _v0 = state.lastPlaced;
         switch (_v0.ctor)
         {case "Just":
            switch (_v0._0.ctor)
              {case "_Tuple2":
                 return function () {
                      var lastPlacedColor = $Player.color($Player.next(state.turn));
                      var thick = function (c) {
                         return _U.replace([["color"
                                            ,c]
                                           ,["width",4]],
                         $Graphics$Collage.defaultLine);
                      };
                      var lastPlacedOutline = A2($Graphics$Collage.move,
                      {ctor: "_Tuple2"
                      ,_0: tileSize * $Basics.toFloat(_v0._0._0)
                      ,_1: tileSize * $Basics.toFloat(_v0._0._1)},
                      A2($Graphics$Collage.outlined,
                      thick(lastPlacedColor),
                      $Graphics$Collage.square(tileSize + 4)));
                      return _L.fromArray([lastPlacedOutline]);
                   }();}
              break;
            case "Nothing":
            return _L.fromArray([]);}
         _E.Case($moduleName,
         "between lines 73 and 79");
      }();
   });
   var pieceToImage = F2(function (piece,
   tileSize) {
      return function () {
         var imgPath = function () {
            switch (piece.ctor)
            {case "Dragon":
               return "images/tile_4.jpg";
               case "Fenrir":
               return "images/tile_3.jpg";
               case "Loki":
               return "images/tile_0.jpg";
               case "Odin":
               return "images/tile_7.jpg";
               case "Skadi":
               return "images/tile_2.jpg";
               case "Thor":
               return "images/tile_6.jpg";
               case "Troll":
               return "images/tile_5.jpg";
               case "Valkyrie":
               return "images/tile_1.jpg";}
            _E.Case($moduleName,
            "between lines 42 and 51");
         }();
         return A3($Graphics$Element.image,
         $Basics.round(tileSize),
         $Basics.round(tileSize),
         imgPath);
      }();
   });
   var drawPiece = F2(function (_v5,
   tileSize) {
      return function () {
         switch (_v5.ctor)
         {case "_Tuple2":
            switch (_v5._0.ctor)
              {case "_Tuple2":
                 return function () {
                      var y = $Basics.toFloat(_v5._0._1) * tileSize;
                      var x = $Basics.toFloat(_v5._0._0) * tileSize;
                      return A2($Graphics$Collage.move,
                      {ctor: "_Tuple2",_0: x,_1: y},
                      $Graphics$Collage.toForm(A2(pieceToImage,
                      _v5._1,
                      tileSize)));
                   }();}
              break;}
         _E.Case($moduleName,
         "between lines 66 and 69");
      }();
   });
   var rulesRow = F2(function (piece,
   description) {
      return function () {
         var value = $Piece.baseValue(piece);
         var text = A2($Graphics$Element.flow,
         $Graphics$Element.right,
         _L.fromArray([$Text.leftAligned($Text.bold($Text.toText($List.concat(_L.fromArray([$Piece.toString(piece)
                                                                                           ," ("
                                                                                           ,$String.show(value)
                                                                                           ,"): "])))))
                      ,$Text.plainText(description)]));
         var height = 30;
         var image = A2($Graphics$Element.beside,
         A2(pieceToImage,piece,height),
         A2($Graphics$Element.spacer,
         10,
         10));
         return A2($Graphics$Element.beside,
         image,
         A4($Graphics$Element.container,
         600,
         height,
         $Graphics$Element.midLeft,
         text));
      }();
   });
   var pieceRules = A2($Graphics$Element.flow,
   $Graphics$Element.down,
   _L.fromArray([A2(rulesRow,
                $GameTypes.Odin,
                "No special power")
                ,A2(rulesRow,
                $GameTypes.Thor,
                "No special power")
                ,A2(rulesRow,
                $GameTypes.Troll,
                "No other tiles (except other Trolls) may be placed adjacent to a Troll.")
                ,A2(rulesRow,
                $GameTypes.Dragon,
                "May be placed on top of other tiles (except other Dragons).")
                ,A2(rulesRow,
                $GameTypes.Fenrir,
                "Value is the sum of all Fenrir tiles in the same row or column.")
                ,A2(rulesRow,
                $GameTypes.Skadi,
                "You may exchange it with any tile on the table (except other Skadi).")
                ,A2(rulesRow,
                $GameTypes.Valkyrie,
                "Automatically scores when there are Valkyries on both ends of a line.")
                ,A2(rulesRow,
                $GameTypes.Loki,
                "All tiles adjacent to Loki (except other Lokis) have value 0.")]));
   var handTileSize = 100;
   var handPadding = 10;
   var renderHand = F3(function (player,
   state,
   clickInput) {
      return function () {
         var hiddenPiece = A3($Graphics$Element.image,
         $Basics.round(handTileSize),
         $Basics.round(handTileSize),
         "images/tile_back.jpg");
         var pieceSize = $Basics.round(handTileSize) + handPadding;
         var pieceImage = function (pieceStr) {
            return pieceToImage($Piece.fromString(pieceStr));
         };
         var isPieceHeld = function (idx) {
            return _U.eq(state.turn,
            player) && _U.eq(state.heldPiece,
            $Maybe.Just(idx));
         };
         var makePiece = F2(function (idx,
         pieceStr) {
            return A2($Graphics$Input.clickable,
            clickInput.handle,
            A2($GameTypes.PieceInHand,
            player,
            idx))($Graphics$Element.color(isPieceHeld(idx) ? $Player.color(state.turn) : $Color.white)(A3($Graphics$Element.container,
            pieceSize,
            pieceSize,
            $Graphics$Element.middle)(A2(pieceImage,
            pieceStr,
            handTileSize))));
         });
         var p = $GameTypes.playerName(player);
         var playerType = A2($Dict.getOrFail,
         p,
         state.players);
         var handText = A3($Graphics$Element.container,
         80,
         pieceSize,
         $Graphics$Element.middle)($Text.leftAligned($Text.color($Player.color(player))((_U.eq(state.turn,
         player) && $Basics.not(state.gameOver) ? $Text.bold : $Basics.identity)($Text.toText($String.toUpper($String.show(playerType)))))));
         var hand = A2($Dict.getOrFail,
         p,
         state.hands);
         var playerHand = $List.isEmpty(hand) && (state.started && $Basics.not(state.gameOver)) ? _L.fromArray([A3($Graphics$Element.container,
         100,
         100,
         $Graphics$Element.middle)(A3($Graphics$Input.button,
         clickInput.handle,
         $GameTypes.PassButton,
         "Pass"))]) : A2($List.indexedMap,
         makePiece,
         hand);
         var cpuHand = A2($List.map,
         function (x) {
            return A3($Graphics$Element.container,
            pieceSize,
            pieceSize,
            $Graphics$Element.middle)(hiddenPiece);
         },
         hand);
         var handContents = _U.eq(A2($Dict.getOrFail,
         p,
         state.players),
         $GameTypes.Human) ? playerHand : cpuHand;
         var score = A3($Graphics$Element.container,
         25,
         pieceSize,
         $Graphics$Element.midLeft)($Text.asText(A2($Dict.getOrFail,
         p,
         state.score)));
         var delta = A3($Graphics$Element.container,
         20,
         pieceSize,
         $Graphics$Element.midLeft)($Text.leftAligned($Text.height(9)($Text.toText(A2($Dict.getOrFail,
         p,
         state.delta)))));
         return A2($Graphics$Element.flow,
         $Graphics$Element.right,
         _L.append(_L.fromArray([handText]),
         _L.append(_L.fromArray([score]),
         _L.append(_L.fromArray([delta]),
         handContents))));
      }();
   });
   var gameHeaderSize = 100;
   var getTotalBoardSize = function (_v11) {
      return function () {
         switch (_v11.ctor)
         {case "_Tuple2":
            return _v11._1 - gameHeaderSize;}
         _E.Case($moduleName,
         "on line 23, column 37 to 60");
      }();
   };
   var getTileSizeFromBoardSize = F2(function (boardSize,
   dims) {
      return $Basics.toFloat(getTotalBoardSize(dims) / boardSize | 0);
   });
   var drawGrid = F2(function (boardSize,
   dims) {
      return function () {
         var tileSize = A2(getTileSizeFromBoardSize,
         boardSize,
         dims);
         var num = $Basics.toFloat(boardSize);
         var size = num * tileSize;
         var offset = tileSize / 2 - size / 2;
         var shape = F2(function (x,y) {
            return A2($Graphics$Collage.move,
            {ctor: "_Tuple2"
            ,_0: tileSize * x + offset
            ,_1: tileSize * y + offset},
            A2($Graphics$Collage.outlined,
            $Graphics$Collage.solid($Color.black),
            $Graphics$Collage.square(tileSize)));
         });
         return A2($List.concatMap,
         function (x) {
            return A2($List.map,
            function (y) {
               return A2(shape,x,y);
            },
            _L.range(0,num - 1));
         },
         _L.range(0,num - 1));
      }();
   });
   var renderBoard = F3(function (state,
   boardSize,
   dims) {
      return function () {
         var grid = A2(drawGrid,
         boardSize,
         dims);
         var tileSize = A2(getTileSizeFromBoardSize,
         boardSize,
         dims);
         var size = boardSize * $Basics.round(tileSize) + 1;
         var pieces = A2($List.map,
         function (p) {
            return A2(drawPiece,
            p,
            tileSize);
         },
         $Dict.toList(state.board));
         var outline = A2(drawLastPlacedOutline,
         state,
         tileSize);
         return A3($Graphics$Collage.collage,
         size,
         size,
         _L.append(grid,
         _L.append(pieces,outline)));
      }();
   });
   var mouseToBoardPosition = F3(function (_v15,
   state,
   dims) {
      return function () {
         switch (_v15.ctor)
         {case "_Tuple2":
            return function () {
                 var boardSize = $Board.getBoardSize(state.board);
                 var tileSize = $Basics.round(A2(getTileSizeFromBoardSize,
                 boardSize,
                 dims));
                 var offset = boardSize / 2 | 0;
                 var y = _v15._1 - gameHeaderSize;
                 var boardY = 0 - ((y / tileSize | 0) - offset);
                 var x = _v15._0;
                 var boardX = (x / tileSize | 0) - offset;
                 return {ctor: "_Tuple2"
                        ,_0: boardX
                        ,_1: boardY};
              }();}
         _E.Case($moduleName,
         "between lines 30 and 37");
      }();
   });
   var render = F3(function (clickInput,
   state,
   dims) {
      return function () {
         var minRulesHeight = 570;
         var rulesAreaWidth = 650;
         var startButton = A3($Graphics$Element.container,
         rulesAreaWidth,
         50,
         $Graphics$Element.middle)(A3($Graphics$Input.button,
         clickInput.handle,
         $GameTypes.Start,
         $Basics.not(state.started) ? "Begin game!" : "Restart game"));
         var rulesArea = A2($Graphics$Element.flow,
         $Graphics$Element.down,
         _L.fromArray([A2($Graphics$Element.size,
                      rulesAreaWidth,
                      50)($Text.centered(A2($Text.height,
                      25,
                      A2($Text.typeface,
                      _L.fromArray(["Rock Salt"
                                   ,"cursive"]),
                      $Text.toText("Rules")))))
                      ,A2($Graphics$Element.spacer,
                      5,
                      5)
                      ,$Graphics$Element.width(rulesAreaWidth)($Text.leftAligned($Text.toText("&bull; Players take turns placing tiles from their hand. You must place a tile next to an existing tile. Rows and columns cannot exceed seven tiles.")))
                      ,$Graphics$Element.width(rulesAreaWidth)($Text.leftAligned($Text.toText("&bull; If the tile you placed has the highest value in a row and/or column (ties don\'t count), you score one point for each tile in that row and/or column.")))
                      ,A2($Graphics$Element.spacer,
                      5,
                      5)
                      ,pieceRules
                      ,startButton]));
         var withSpacing = F2(function (padding,
         elt) {
            return A2($Graphics$Element.beside,
            A2($Graphics$Element.spacer,
            padding,
            padding),
            elt);
         });
         var totalBoardSize = getTotalBoardSize(dims);
         var handGap = totalBoardSize - 2 * $Basics.round(handTileSize) - handPadding * 2;
         var rightArea = _U.cmp(handGap,
         420) > -1 ? rulesArea : _U.cmp(handGap,
         280) > -1 ? A2($Graphics$Element.above,
         pieceRules,
         startButton) : startButton;
         var boardSize = $Board.getBoardSize(state.board);
         var tileSize = A2(getTileSizeFromBoardSize,
         boardSize,
         dims);
         return A2($Graphics$Element.flow,
         $Graphics$Element.down,
         _L.fromArray([A3($Graphics$Element.size,
                      totalBoardSize,
                      gameHeaderSize,
                      $Text.centered(A2($Text.height,
                      50,
                      A2($Text.typeface,
                      _L.fromArray(["Rock Salt"
                                   ,"cursive"]),
                      $Text.toText("V&ouml;lusp&aacute;")))))
                      ,A2($Graphics$Element.flow,
                      $Graphics$Element.right,
                      _L.fromArray([A2($Graphics$Input.clickable,
                                   clickInput.handle,
                                   $GameTypes.Board)(A3(renderBoard,
                                   state,
                                   boardSize,
                                   dims))
                                   ,A2($Graphics$Element.flow,
                                   $Graphics$Element.down,
                                   _L.fromArray([A3(renderHand,
                                                $GameTypes.Red,
                                                state,
                                                clickInput)
                                                ,A2($Graphics$Element.spacer,
                                                1,
                                                5)
                                                ,A2(withSpacing,
                                                10,
                                                $Graphics$Element.color($Color.gray)(A2(withSpacing,
                                                10,
                                                A4($Graphics$Element.container,
                                                rulesAreaWidth,
                                                handGap - 10,
                                                $Graphics$Element.midLeft,
                                                rightArea))))
                                                ,A2($Graphics$Element.spacer,
                                                1,
                                                5)
                                                ,A3(renderHand,
                                                $GameTypes.Blue,
                                                state,
                                                clickInput)]))]))]));
      }();
   });
   _elm.Display.values = {_op: _op
                         ,gameHeaderSize: gameHeaderSize
                         ,handPadding: handPadding
                         ,handTileSize: handTileSize
                         ,getTotalBoardSize: getTotalBoardSize
                         ,getTileSizeFromBoardSize: getTileSizeFromBoardSize
                         ,mouseToBoardPosition: mouseToBoardPosition
                         ,pieceToImage: pieceToImage
                         ,drawGrid: drawGrid
                         ,drawPiece: drawPiece
                         ,drawLastPlacedOutline: drawLastPlacedOutline
                         ,renderBoard: renderBoard
                         ,renderHand: renderHand
                         ,rulesRow: rulesRow
                         ,pieceRules: pieceRules
                         ,render: render};
   return _elm.Display.values;
};